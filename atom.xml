<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>taosean&#39;s 学习之旅</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://taosean.github.io/"/>
  <updated>2021-03-18T12:54:26.997Z</updated>
  <id>https://taosean.github.io/</id>
  
  <author>
    <name>taosean</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【转载】谈谈CNN中的位置和尺度问题</title>
    <link href="https://taosean.github.io//2021/03/18/Location-and-scale-in-CNN/"/>
    <id>https://taosean.github.io//2021/03/18/Location-and-scale-in-CNN/</id>
    <published>2021-03-18T12:10:01.000Z</published>
    <updated>2021-03-18T12:54:26.997Z</updated>
    
    <content type="html"><![CDATA[<p>在知乎上看到一篇文章写到关于 CNN 的平移不变性和平移等变性以及 CNN 对位置和深度信息预测的文章，觉得很有收获，因此转载在这里。里面也会穿插自己 的理解。</p><a id="more"></a><p>个人总结:</p><blockquote><p>xxx</p></blockquote><p>以下为正文：</p><h1 id="1-cnn是否存在平移和尺度的不变性和相等性"><a class="markdownIt-Anchor" href="#1-cnn是否存在平移和尺度的不变性和相等性"></a> 1. CNN是否存在平移和尺度的不变性和相等性</h1><h2 id="11-不变性和相等性的定义"><a class="markdownIt-Anchor" href="#11-不变性和相等性的定义"></a> 1.1 不变性和相等性的定义</h2><p>在介绍卷积神经网络（CNN）之前，我们对于不变性和相等性的理解可能来自于传统图像处理算法中的，平移、旋转、光照和尺度等不变性，比如HOG梯度方向直方图，由于cell的存在，其对于平移、旋转有一定的不变性，另外由于对图像局部对比度归一化的操作，使其对于光照也有着一定的不变性。又比如说SIFT特征提取，其对于以上四点都有着不变性，其中由于尺度金字塔，使得对尺度也有不变性。这里我们对于不变性的理解就是，同一对象发生平移、旋转、光照变化、尺度变换甚至形变等，其属性应该一致。下面我们给出具体的不变性和相等性的定义。</p><p>其中不变性（invariance）的定义正如上文所说，因此其形式为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>F</mi><mo stretchy="false">[</mo><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mi>f</mi><mi>o</mi><mi>r</mi><mi>m</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">F(x)=F[transform(x)]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">[</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">]</span></span></span></span></span></p><p>而对于相等性（equivalence），顾名思义，就是对输入进行变换之后，输出也发生相应的变换：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mi>f</mi><mi>o</mi><mi>r</mi><mi>m</mi><mo stretchy="false">[</mo><mi>F</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>=</mo><mi>F</mi><mo stretchy="false">[</mo><mi>t</mi><mi>r</mi><mi>a</mi><mi>n</mi><mi>s</mi><mi>f</mi><mi>o</mi><mi>r</mi><mi>m</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">transform[F(x)]=F[transform(x)]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">m</span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">[</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mclose">]</span></span></span></span></span></p><p>不过如果我们只考虑输出对于输入不变性和相等性的情况，则会难以理解，因为我们更多地是想象着特征层面的映射，比如：</p><p><img src="invariance-equivalence.jpg" alt="不变性和等变性"></p><p>那么特征层面对于输出的影响我们可能考虑得比较少，但是却实质存在，比如目标在图像中的平移和尺度等变换，在目标检测任务中，必须要使得网络具有相关的变换相等性，由此捕捉目标的位置和形状变化。而在图像分类、目标识别、行人重识别等任务中，又必须使得网络具有相关变换的不变性。这两点也是目标检测和行人检索领域中一个经典的矛盾问题，目前好像还没有特别好的解决，更多地是分阶段地执行不同的任务，防止特征共用。比如：经典的两阶段目标检测任务中，第一阶段是粗检测和前景背景分类，第二阶段是精修和具体类别分类，有一定的偏重。行人检索算法则大多是先检测后识别的策略。当然除了不变性和相等性的问题，还存在类内差异的问题，比如不同的人对于检测而言都是行人类别，对于识别而言则是不同的人，这对于特征提取也存在挑战。</p><h2 id="12-cnn网络的执行过程"><a class="markdownIt-Anchor" href="#12-cnn网络的执行过程"></a> 1.2 CNN网络的执行过程</h2><p>我记得我几年前第一次接触到深度学习的时候，对于全连接和CNN的局部连接形式，都有平移、尺度不变性的说法。对于全连接网络，由于下一层的每个节点都会与上一层进行连接：</p><p><img src="fc.jpg" alt="全连接网络"></p><p>因此无论输入发生了平移、尺度等什么变换，只要其属性没变，全连接网络更能捕捉其中的不变性。而对于卷积神经网络，我们都知道两个特点：局部连接和权值共享。</p><p><img src="cnn.jpg" alt="卷积神经网络和全连接网络对比"></p><p>对于局部连接，因为全连接参数太多，容易造成过拟合，并且图像领域更多地关注局部细节信息，所以局部连接方式有效。至于权值共享，也有减少参数的作用，很像图像处理中的滤波器。我们早期对于其不变性的理解更多是遵循一个宏观的感受，即由于卷积核的移位滤波，上一层的特征到下一层的特征相对位置<strong>宏观不变</strong>，直到最后输出，类似于全连接的效果，从而获得不变性。</p><h2 id="13-cnn网络潜在问题与改进"><a class="markdownIt-Anchor" href="#13-cnn网络潜在问题与改进"></a> 1.3 CNN网络潜在问题与改进</h2><p>正因为我刚说的宏观不变，使得输入在经过多次卷积、池化之后，微观/细节的变化累积放大，从而失去了这种不变性，接下来我会结合两篇论文进行介绍。</p><p>第一个是为了解决CNN平移不变性对抗性攻击的一篇ICML2019论文《<a href="https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/1904.11486.pdf%3Ffbclid%3DIwAR1VRPIrctulC6EhTAhKFjIFrlx_JjKR09JnESzLELUnlTL40iOT5tYwotA" target="_blank" rel="noopener">Making Convolutional Networks Shift-Invariant Again</a>》。这篇文章主要讨论了CNN网络中的降采样对于平移不变性的影响：</p><p><img src="window1.jpg" alt=""></p><p>上图是对于一个窗户分别采用从0~7的平移量，其特征图与不平移的差异，可以明显看到，特征图出现了波动。相应地，上半部分是利用 pix2pix 生成的图像，我们可以看到随着平移量的增大，窗户中的竖直线从两根变成了一根。这一点就表明传统的 CNN 网络并不具有平移不变性。</p><p>首先，作者做了这样一个小实验，即采用 maxpooling 对一维向量[0011001100]进行池化，由此得到向量[01010]：</p><p><img src="experiment.jpg" alt="小实验"></p><p>接着，如果将输入向右平移一个单位，则得到向量[111111]：</p><p><img src="res.jpg" alt="小实验结果"></p><p>很明显，平移相等性和不变性都丢失了。接着作者做了进一步实验，利用余弦距离来刻画平移相等性，采用VGG网络对Cifar数据集进行试验：</p><p><img src="experiment2.jpg" alt=""></p><p>其中颜色越深说明差异越大，可以看到每次maxpooling都增加了特征的差异性，不过作者将max和pool操作分开了，为了区分取最大值和降采样的影响：<br><img src="maxpooling.jpg" alt=""></p><p>很明显，降采样对于平移相等性的影响更大，而CNN中涉及到降采样的操作有：池化（maxpooling和average pooling）和带步长的卷积（strided convolution）。对此作者提出了一种名为<strong>Anti_aliasing</strong>方法，中文叫做抗锯齿处理。传统信号处理领域中对于抗锯齿的技术，一般要么增大采样频率，但由于图像处理任务一般都需要降采样，这一点不适合。要么采用图像模糊（bluring）技术，根据Nyquist采样理论，是给定采样频率，通过降低原始信号的频率来使得信号能够被重构出来，如下图所示。对模糊化处理和未处理的原图像进行下采样，得到图中底部的两张图，模糊化处理的原图像下采样的图像还能看出一些轮廓，而未处理的原图像下采样的图像就显得更加混乱。</p><p><img src="blur.jpg" alt="原图下采样和模糊后图像下采样对比"></p><p>作者就是采用了模糊的方式，提出了三种不同的blur kernel：</p><ul><li>Rectangle-2：[1, 1]，类似于均值池化和最近邻插值；</li><li>Triangle-2：[1, 2, 1]，类似于双线性插值；</li><li>Binomial-5：[1, 4, 6, 4, 1]，这个被用在拉普拉斯金字塔中。</li></ul><p>每个核都需要归一化，即除以核内所有元素之和，然后加入到降采样过程，即在降采样之前使用blur kernel进行卷积滤波：</p><p><img src="aa.jpg" alt=""></p><p>可以看到其效果很不错：</p><p><img src="res2.jpg" alt="实验效果"></p><p><img src="table1.jpg" alt="实验结果"></p><p>代码和模型见：<a href="https://richzhang.github.io/antialiased-cnns/" target="_blank" rel="noopener">https://richzhang.github.io/antialiased-cnns/</a>或者<a href="https://github.com/adobe/antialiased-cnns" target="_blank" rel="noopener">https://github.com/adobe/antialiased-cnns</a></p><br><p>第二篇是同年发表在JMLR的一篇论文《<a href="https://link.zhihu.com/?target=http%3A//www.jmlr.org/papers/volume20/19-519/19-519.pdf" target="_blank" rel="noopener">Why do deep convolutional networks generalize so poorly to small image transformations?</a>》。作者首先给出了几组示例，分别表示了平移、尺度以及轻微图像差异对网络预测分类置信度的影响：</p><p><img src="transformation.jpg" alt="平移、尺度和轻微图像差异对预测分类置信度的影响"></p><p>作者认为CNN忽视了采样定理，这一点之前Simoncelli等人已经在论文Shiftable multiscale transforms中验证了二次采样在平移不变性上的失败，他们在文中说：</p><blockquote><p>我们不能简单地把系统中的平移不变性寄希望于卷积和二次采样，输入信号的平移不意味着变换系数的简单平移，除非这个平移是每个二次采样因子的倍数。</p></blockquote><p>我们现有的网络框架中，越深的网络，降采样次数越多，因此出现的问题更多。紧接着，作者提出了几点论述：</p><ul><li>如果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 是经过卷积操作且满足平移不变性的特征，那么全局池化操作 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mo>∑</mo><mi>i</mi></msub><mi>r</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sum_i r(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0497100000000001em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16195399999999993em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 也满足平移不变性；</li><li>对于特征提取器 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 和降采样因子 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span></span></span> ，如果输入的平移都可以在输出上线性插值反映出来：</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo>∑</mo><mi>i</mi></munder><mi>B</mi><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>r</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sum_{i}B(x-x_i)r(x_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.327674em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000003em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>由香农-奈奎斯特定理知， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">r(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span> 满足可移位性，要保证采样频率至少为最高信号频率的2倍。</p><p>接下来，作者对这些问题做了一些改进尝试：</p><ul><li><strong>抗锯齿</strong>，这个就是我们刚刚介绍的方法；</li><li><strong>数据增强</strong>，当前在很多图像任务中，我们基本都会采用随机裁剪、多尺度、颜色抖动等等数据增强手段，的确也让网络学习到了部分不变性；</li><li><strong>减少降采样</strong>，也就是说只依赖卷积对于输入尺度的减小来变化，这一点只对小图像适用，主要是因为计算代价太高。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在知乎上看到一篇文章写到关于 CNN 的平移不变性和平移等变性以及 CNN 对位置和深度信息预测的文章，觉得很有收获，因此转载在这里。里面也会穿插自己 的理解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="平移不变性" scheme="https://taosean.github.io/tags/%E5%B9%B3%E7%A7%BB%E4%B8%8D%E5%8F%98%E6%80%A7/"/>
    
      <category term="平移等变性" scheme="https://taosean.github.io/tags/%E5%B9%B3%E7%A7%BB%E7%AD%89%E5%8F%98%E6%80%A7/"/>
    
      <category term="translation invariance" scheme="https://taosean.github.io/tags/translation-invariance/"/>
    
      <category term="translation equivalence" scheme="https://taosean.github.io/tags/translation-equivalence/"/>
    
  </entry>
  
  <entry>
    <title>【转载】图像与滤波</title>
    <link href="https://taosean.github.io//2021/03/18/Image-and-Filtering/"/>
    <id>https://taosean.github.io//2021/03/18/Image-and-Filtering/</id>
    <published>2021-03-18T11:12:50.000Z</published>
    <updated>2021-03-18T12:07:28.727Z</updated>
    
    <content type="html"><![CDATA[<p>看到了一篇关于图像滤波的文章，详细地解释了从波和信号处理的角度来理解图像。</p><p>以下为原文。</p><a id="more"></a><hr><p>前几天读到一篇<a href="https://medium.com/statuscode/filtering-images-using-web-audio-api-276555cca6ad" target="_blank" rel="noopener">文章</a>，它提到<strong>图像其实是一种波，可以用波的算法处理图像</strong>。我顿时有一种醍醐灌顶的感觉，从没想到这两个领域是相关的，图像还可以这样玩！下面我就来详细介绍这篇文章。</p><h1 id="一-为什么图像是波"><a class="markdownIt-Anchor" href="#一-为什么图像是波"></a> 一、为什么图像是波？</h1><p>我们知道，图像由像素组成。下图是一张 400 x 400 的图片，一共包含了 16 万个像素点。<br><img src="pic1.jpg" alt="lena"><br>每个像素的颜色，可以用红、绿、蓝、透明度四个值描述，大小范围都是<code>0 ～ 255</code>，比如黑色是<code>[0, 0, 0, 255]</code>，白色是<code>[255, 255, 255, 255]</code>。通过 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Pixel_manipulation_with_canvas" target="_blank" rel="noopener">Canvas API</a> 就可以拿到这些值。</p><p>如果把每一行所有像素（上例是400个）的红、绿、蓝的值，依次画成三条曲线，就得到了下面的图形。<br><img src="wave1.png" alt="RGB像素值变化"><br>可以看到，每条曲线都在不停的上下波动。有些区域的波动比较小，有些区域突然出现了大幅波动（比如 54 和 324 这两点）。</p><p>对比一下图像就能发现，曲线波动较大的地方，也是图像出现突变的地方。<br><img src="wave2.png" alt="原图与曲线波动较大地方的对应"><br>这说明波动与图像是紧密关联的。<strong>图像本质上就是各种色彩波的叠加。</strong></p><h1 id="二-频率"><a class="markdownIt-Anchor" href="#二-频率"></a> 二、频率</h1><p>综上所述，<strong>图像就是色彩的波动：波动大，就是色彩急剧变化；波动小，就是色彩平滑过渡。因此，波的各种指标可以用来描述图像。</strong></p><p>频率（frequency）是波动快慢的指标，单位时间内波动次数越多，频率越高，反之越低。<br><img src="wave3.jpg" alt="正弦波"><br>上图是函数 <code>sin(Θ)</code> 的图形，在 <code>2π</code> 的周期内完成了一次波动，频率就是1。<br><img src="wave4.jpg" alt="2倍频率"><br>上图是函数<code>sin(2Θ)</code>的图形，在<code>2π</code>的周期内完成了两次波动，频率就是2。</p><p>所以，<strong>色彩剧烈变化的地方，就是图像的高频区域；色彩稳定平滑的地方，就是低频区域</strong>。</p><h1 id="三-滤波器"><a class="markdownIt-Anchor" href="#三-滤波器"></a> 三、滤波器</h1><p>物理学对波的研究已经非常深入，提出了很多处理波的方法，其中就有滤波器（filter）：过滤掉某些波，保留另一些波。</p><p>下面是两种常见的滤波器 。</p><blockquote><ul><li>低通滤波器（lowpass）：减弱或阻隔高频信号，保留低频信号</li><li>高通滤波器（highpass）：减弱或阻隔低频信号，保留高频信号</li></ul></blockquote><p>下面是低通滤波的例子。<br><img src="lowpass.png" alt="低通滤波"><br>上图中，蓝线是原始的波形，绿线是低通滤波 <code>lowpass</code> 后的波形。可以看到，绿线的波动比蓝线小很多，非常平滑。</p><p>下面是高通滤波的例子。<br><img src="highpass.png" alt="高通滤波"></p><p>上图中，黄线是原始的波形，蓝线是高通滤波 <code>highpass</code> 后的波形。可以看到，黄线的三个波峰和两个波谷（低频波动），在蓝线上都消失了，而黄线上那些密集的小幅波动（高频波动），则是全部被蓝线保留。</p><p>再看一个例子。<br><img src="examp1.png" alt=""><br>上图有三根曲线，黄线是高频波动，红线是低频波动。它们可以合成为一根曲线，就是绿线<br><img src="examp2.png" alt=""><br>上图中，绿线进行低通滤波和高通滤波后，得到两根黑色的曲线，它们的波形跟原始的黄线和红线是完全一致的。</p><h1 id="四-图像的滤波"><a class="markdownIt-Anchor" href="#四-图像的滤波"></a> 四、图像的滤波</h1><p>浏览器实际上包含了滤波器的实现，因为 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API" target="_blank" rel="noopener">Web Audio API</a> 里面定义了<a href="https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/type" target="_blank" rel="noopener">声波的滤波</a>。这意味着可以通过浏览器，将 <code>lowpass</code> 和 <code>highpass</code> 运用于图像。</p><p><code>lowpass</code> 使得图像的高频区域变成低频，即色彩变化剧烈的区域变得平滑，也就是出现模糊效果。<br><img src="lena2.jpg" alt="低通使图像产生模糊的效果"><br><img src="res1.png" alt="低通后的曲线"><br>上图中，红线是原始的色彩曲线，蓝线是低通滤波后的曲线。</p><p><code>highpass</code> 正好相反，过滤了低频，只保留那些变化最快速最剧烈的区域，也就是图像里面的物体边缘，所以常用于边缘识别。<br><img src="lena3.jpg" alt="高通使图像保留边缘"><br><img src="res2.png" alt="高通后的曲线"></p><p>上图中，红线是原始的色彩曲线，蓝线是高通滤波后的曲线。</p><p>下面这个<a href="http://fellipe.com/demos/lena-js/" target="_blank" rel="noopener">网址</a>，可以将滤波器拖到图像上，产生过滤后的效果。<br><img src="webtool.jpg" alt="网页工具"></p><p>浏览器实现滤波的范例代码，可以看这个<a href="https://github.com/rssilva/web-audio-image-filtering" target="_blank" rel="noopener">仓库</a>。</p><h1 id="参考文章"><a class="markdownIt-Anchor" href="#参考文章"></a> 参考文章</h1><p><a href="http://www.ruanyifeng.com/blog/2017/12/image-and-wave-filters.html" target="_blank" rel="noopener">图像与滤波</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看到了一篇关于图像滤波的文章，详细地解释了从波和信号处理的角度来理解图像。&lt;/p&gt;
&lt;p&gt;以下为原文。&lt;/p&gt;
    
    </summary>
    
    
      <category term="图像" scheme="https://taosean.github.io/tags/%E5%9B%BE%E5%83%8F/"/>
    
      <category term="滤波" scheme="https://taosean.github.io/tags/%E6%BB%A4%E6%B3%A2/"/>
    
      <category term="filter" scheme="https://taosean.github.io/tags/filter/"/>
    
      <category term="高通滤波器" scheme="https://taosean.github.io/tags/%E9%AB%98%E9%80%9A%E6%BB%A4%E6%B3%A2%E5%99%A8/"/>
    
      <category term="低通滤波器" scheme="https://taosean.github.io/tags/%E4%BD%8E%E9%80%9A%E6%BB%A4%E6%B3%A2%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>匈牙利算法</title>
    <link href="https://taosean.github.io//2021/03/08/Hungarian-algorithm/"/>
    <id>https://taosean.github.io//2021/03/08/Hungarian-algorithm/</id>
    <published>2021-03-08T01:38:17.000Z</published>
    <updated>2021-03-16T13:09:07.992Z</updated>
    
    <content type="html"><![CDATA[<p>一些有关匈牙利算法的文章。</p><a id="more"></a><p><a href="https://blog.csdn.net/u013384984/article/details/90718287" target="_blank" rel="noopener">匈牙利算法-看这篇绝对就够了！</a></p><p><a href="https://blog.csdn.net/C20180630/article/details/70175814" target="_blank" rel="noopener">二分图匹配——匈牙利算法和KM算法</a></p><p><a href="https://blog.csdn.net/u013384984/article/details/90718287" target="_blank" rel="noopener">趣写算法系列之–匈牙利算法</a></p><h3 id="矩阵处理相关代码可以看-sklearn-中的-linear_assignmentpy"><a class="markdownIt-Anchor" href="#矩阵处理相关代码可以看-sklearn-中的-linear_assignmentpy"></a> 矩阵处理相关，代码可以看 sklearn 中的 linear_assignment.py</h3><p><a href="https://www.feiyilin.com/munkres.html" target="_blank" rel="noopener">Munkres Algorithm For Assignment Problem: A Tutorial</a></p><p><a href="https://blog.csdn.net/u014754127/article/details/78086014" target="_blank" rel="noopener">Hungarian Algorithm匈牙利算法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些有关匈牙利算法的文章。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hungarian algorithm" scheme="https://taosean.github.io/tags/Hungarian-algorithm/"/>
    
      <category term="二分图" scheme="https://taosean.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE/"/>
    
      <category term="最大匹配" scheme="https://taosean.github.io/tags/%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>【转载】进程？线程？小朋友你是否有很多问号？</title>
    <link href="https://taosean.github.io//2021/01/05/Process-and-Thread-1/"/>
    <id>https://taosean.github.io//2021/01/05/Process-and-Thread-1/</id>
    <published>2021-01-05T10:39:55.000Z</published>
    <updated>2021-01-06T03:21:02.047Z</updated>
    
    <content type="html"><![CDATA[<p>本文转载自<a href="https://mp.weixin.qq.com/s/4uhfJeYwQgzd6A6nTBj_Gg" target="_blank" rel="noopener">这篇文章</a></p><a id="more"></a><p><img src="menu.jpg" alt="目录"></p><h1 id="什么是进程"><a class="markdownIt-Anchor" href="#什么是进程"></a> 什么是进程？</h1><p><strong>标准定义</strong>：进程是一个具有一定独立功能的程序在一个数据集合上依次动态执行的过程。进程是一个正在执行程序的实例，包括程序计数器、寄存器和程序变量的当前值。</p><p>简单来说<strong>进程就是一个程序的执行流程，内部保存程序运行所需的资源</strong></p><p>在操作系统中可以有多个进程在运行，可对于CPU来说，同一时刻，一个CPU只能运行一个进程，但在某一时间段内，CPU将这一时间段拆分成更短的时间片，CPU不停地在各个进程间游走，这就给人一种并行的错觉，像CPU可以同时运行多个进程一样，这就是伪并行。</p><hr><h1 id="进程和程序有什么联系"><a class="markdownIt-Anchor" href="#进程和程序有什么联系"></a> 进程和程序有什么联系？</h1><p>一个进程是某种类型的一个活动，它有程序、输入、输出以及状态。单个处理器可以被若干进程共享，它使用某种调度算法决定何时停止一个进程的工作，并转而为另一个进程提供服务。</p><ul><li>程序是产生进程的基础</li><li>程序的每次运行产生不同的进程</li><li>进程是程序功能的体现</li><li>通过多次执行，一个程序可对应多个进程；通过调用关系，一个进程可包括多个程序</li></ul><hr><h1 id="进程和程序有什么区别"><a class="markdownIt-Anchor" href="#进程和程序有什么区别"></a> 进程和程序有什么区别？</h1><p><strong>进程是动态的，程序是静态的</strong>：程序是有序代码的集合，进程是程序的执行。</p><p><strong>进程是暂时的，程序是永久的</strong>：进程是一个状态变化的过程，程序可长久保存。</p><p><strong>进程和程序的组成不同</strong>：进程的组成包括程序、数据和进程控制块（进程状态信息）。</p><hr><h1 id="进程有什么特点"><a class="markdownIt-Anchor" href="#进程有什么特点"></a> 进程有什么特点？</h1><p><strong>动态性</strong>：可动态地创建和结束进程</p><p><strong>并发性</strong>：可以被独立的调度并占用处理机并发运行</p><p><strong>独立性</strong>：不同进程的工作不相互影响</p><p><strong>制约性</strong>：因访问共享资源或进程间同步而产生制约</p><hr><h1 id="进程如何创建"><a class="markdownIt-Anchor" href="#进程如何创建"></a> 进程如何创建？</h1><p>有什么事件会触发进程的创建呢？</p><p><strong>系统初始化</strong>：当启动操作系统时，通常会创建很多进程，有些是同用户交互并替他们完成工作的前台进程，其它的都是后台进程，后台进程和特定用户没有关系，但也提供某些专门的功能，例如接收邮件等，这种功能的进程也称为守护进程。计划任务是个典型的守护进程，它每分钟运行一次来检查是否有工作需要它完成。如果有工作要做，它就会完成此工作，然后进入休眠状态，直到下一次检查时刻的到来。</p><p><strong>正在运行的程序执行了创建进程的系统调用</strong>：在一个进程中又创建了一个新的进程，这种情况很常见。</p><p><strong>用户请求创建一个新进程</strong>：这种情况相信每个人都见过，用电脑时双击某个应用图标，就会有至少一个进程被创建。</p><p><strong>一个批处理作业的初始化</strong>：这种情形不常见，仅在大型机的批处理系统中应用，用户在这种系统中提交批处理作业，在操作系统认为有资源可运行另一个作业时，它创建一个新的进程，并运行其输入队列中的下一个作业。</p><p>归根到底：在UNIX系统中，只有fork系统调用才可以创建新进程，使用方式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pid_t</span> id = fork();</span><br><span class="line">    <span class="keyword">if</span> (id &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"fork\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (id == <span class="number">0</span>) &#123;  <span class="comment">// 子进程</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"子进程\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 父进程</span></span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"父进程\n"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进程创建之后，父子进程都有<strong>各自不同的地址空间</strong>，其中一个进程在其地址空间的修改对另一个进程不可见。子进程的初始化空间是父进程的一个副本，这里涉及两个不同地址空间，不可写的内存区是共享的，某些UNIX的实现使程序正文在两者间共享，因为它是不可修改的。</p><p>还有一种<strong>写时复制</strong>共享技术，子进程共享父进程的所有内存，一旦两者之一想要修改部分内存，则这块内存被复制确保修改发生在当前进程的私有内存区域。</p><hr><h1 id="进程为何终止"><a class="markdownIt-Anchor" href="#进程为何终止"></a> 进程为何终止？</h1><p>有什么事件会触发进程的终止呢？</p><p><strong>正常退出</strong>（自愿）：进程完成了工作正常终止，UNIX中退出进程的系统调用是exit。</p><p><strong>出错退出</strong>（自愿）：进程发现了错误而退出。可以看如下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123; <span class="comment">// 有错误就退出程序</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Func();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>严重错误</strong>（非自愿）：进程发生了严重的错误而不得不退出，通常是程序的错误导致，例如执行了一条非法指令，引用不存在的内存，或者除数是0等，出现这些错误时进程默认会退出。而有些时候如果用户想自行处理某种类型的错误，发生不同类型错误时进程会收到不同类型的信号，用户注册处理不同信号的函数即可。</p><p><strong>被其它进程杀死</strong>（非自愿）：其它进程执行kill系统调用通知操作系统杀死某个进程。</p><hr><h1 id="操作系统如何进行进程管理"><a class="markdownIt-Anchor" href="#操作系统如何进行进程管理"></a> 操作系统如何进行进程管理？</h1><p>这里就不得不提到一个数据结构：进程控制块（PCB），<strong>操作系统为每个进程都维护一个PCB</strong>，用来保存与该进程有关的各种状态信息。进程可以抽象理解为就是一个PCB，<strong>PCB是进程存在的唯一标志</strong>，操作系统用PCB来描述进程的基本情况以及运行变化的过程，进程的任何状态变化都会通过PCB来体现。</p><p><strong>PCB包含进程状态的重要信息</strong>，包括程序计数器、堆栈指针、内存分配状况、所打开文件的状态、账号和调度信息，以及其它在进程由运行态转换到就绪态或阻塞态时必须保存的信息，从而保证该进程随后能再次启动，就像从未中断过一样。后一小节会具体介绍PCB。</p><p>提到进程管理，有一个概念我们必须要知道，就是<strong>中断向量</strong>，中断向量是指中断服务程序的入口地址。一个进程在执行过程中可能会被中断无数次，但是每次中断后，被中断的进程都要返回到与中断发生前完全相同的状态。</p><p>中断发生后操作系统最底层做了什么呢？</p><blockquote><p>1）硬件压入堆栈程序计数器等；<br>2）硬件从中断向量装入新的程序计数器；<br>3）汇编语言过程保存寄存器值；<br>4）汇编语言过程设置新的堆栈；<br>5）C中断服务例程运行（典型的读和缓冲输入）；<br>6）调度程序决定下一个将运行的进程；<br>7）C过程返回到汇编代码；<br>8）汇编语言过程开始运行新的当前进程。</p></blockquote><hr><h1 id="进程控制块中存储了什么信息"><a class="markdownIt-Anchor" href="#进程控制块中存储了什么信息"></a> 进程控制块中存储了什么信息？</h1><p><strong>进程标识信息</strong>：如本进程的标识，本进程的父进程标识，用户标识等。</p><p><strong>处理机状态信息保护区</strong>：用于保存进程的运行现场信息。</p><ul><li>用户可见寄存器：用户程序可以使用的数据、地址等寄存器。</li><li>控制和状态寄存器：程序计数器，程序状态字。</li><li>栈指针：过程调用、系统调用、中断处理和返回时需要用到它。</li></ul><p><strong>进程控制信息</strong>：</p><ul><li>调度和状态信息：用于操作系统调度进程使用。</li><li>进程间通信信息：为支持进程间与通信相关的各种标识、信号、信件等，这些信息存在接收方的进程控制块中。</li><li>存储管理信息：包含有指向本进程映像存储空间的数据结构。</li><li>进程所用资源：说明由进程打开使用的系统资源，如打开的文件等。</li><li>有关数据结构连接信息：进程可以连接到一个进程队列中，或连接到相关的其他进程的PCB。</li></ul><hr><h1 id="进程如何进行生命周期管理"><a class="markdownIt-Anchor" href="#进程如何进行生命周期管理"></a> 进程如何进行生命周期管理？</h1><p><strong>进程创建</strong>：</p><p>创建进程有三个主要事件：</p><ul><li>系统初始化</li><li>用户请求创建一个新进程</li><li>一个正在运行的进程执行创建进程的系统调用</li></ul><p><strong>进程运行</strong>：内核选择一个就绪的进程，让它占用处理机并运行，这里就涉及到了进程的调度策略，选择哪个进程调度？为什么选择调度这个进程呢？（莫慌，下面会介绍哈）</p><p><strong>进程等待</strong>：</p><ul><li>在以下情况下进程会等待（阻塞）：</li><li>请求并等待系统服务，无法马上完成</li><li>启动某种操作，无法马上完成</li><li>需要的数据没有到达</li></ul><p><strong>注意：进程只能自己阻塞自己，因为只有进程自身才能知道何时需要等待某种事件的发生</strong>。</p><p><strong>进程唤醒</strong>：<br>进程只能被别的进程或操作系统唤醒，唤醒进程的原因有：</p><ul><li>被阻塞进程需要的资源可被满足</li><li>被阻塞进程等待的事件到达</li><li>将该进程的PCB插入到就绪队列</li></ul><p><strong>进程结束</strong>：<br>在以下四种情况下进程会结束：</p><ul><li>自愿型正常退出</li><li>自愿型错误退出</li><li>强制型致命错误退出</li><li>强制型被其它进程杀死退出</li></ul><hr><h1 id="进程都有什么状态"><a class="markdownIt-Anchor" href="#进程都有什么状态"></a> 进程都有什么状态？</h1><p>不同系统设置的进程状态是不同的，多数系统中的进程在生命结束前有三种基本状态，进程只会处于三种基本状态之一：</p><p><strong>运行状态</strong>：进程正在处理机上运行时就处在运行状态，该时刻进程时钟占用着CPU；</p><p><strong>就绪状态</strong>：万事俱备，只欠东风，进程已经获得了除处理机之外的一切所需资源，一旦得到处理机就可以运行；就绪态中的进程其实可以运行，但因为其它进程正在占用着CPU而暂时停止运行；</p><p><strong>等待状态（阻塞状态）</strong>：进程正在等待某一事件而暂停运行，等待某个资源或者等待输入输出完成。除非某种外部事件发生，否则阻塞态的进程不能运行；</p><p>进程状态变化图如下：<br><img src="status.jpg" alt="进程状态变化图"></p><p>在操作系统发现进程不能继续运行下去时，进程因为等待输入而被阻塞，进程从<strong>运行态转换到阻塞态</strong>！</p><p>调度程序选择了另一个进程执行时，当前程序就会从<strong>运行态转换到就绪态</strong>！</p><p>被调度程序选择的程序会从<strong>就绪态转换到运行态</strong>！</p><p>当阻塞态的进程等待的一个外部事件发生时，就会从<strong>阻塞态转换到就绪态</strong>，此时如果没有其他进程运行时，则立刻从<strong>就绪态转换到运行态</strong>！</p><p>有些与进程管理相关的系统调用读者有必要了解一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pid=fork(); // 创建一个与父进程一样的子进程</span><br><span class="line"></span><br><span class="line">pid=waitpid(); // 等待子进程终止</span><br><span class="line"></span><br><span class="line">s=execve(); // 替换进程的核心映像</span><br><span class="line"></span><br><span class="line">exit(); // 终止进程运行并返回状态值</span><br><span class="line"></span><br><span class="line">s=sigaction(); // 定义信号处理的动作</span><br><span class="line"></span><br><span class="line">s=sigprocmask(); // 检查或更换信号掩码</span><br><span class="line"></span><br><span class="line">s=sigpending(); // 获得阻塞信号集合</span><br><span class="line"></span><br><span class="line">s=sigsuspend(); // 替换信号掩码或挂起进程</span><br><span class="line"></span><br><span class="line">alarm(); // 设置定时器</span><br><span class="line"></span><br><span class="line">pause(); // 挂起调用程序直到下一个信号出现</span><br></pre></td></tr></table></figure><blockquote></blockquote><p>某些系统设置下进程还会有其它状态：<br>创建状态：进程正在被创建还没被转到就绪状态之前的状态；<br>结束状态：进程正在从系统中消失时的状态。</p><hr><h1 id="什么是进程挂起为什么会出现进程挂起"><a class="markdownIt-Anchor" href="#什么是进程挂起为什么会出现进程挂起"></a> 什么是进程挂起？为什么会出现进程挂起？</h1><p>进程挂起就是为了合理且充分的利用系统资源，把一个进程从内存转到外存。进程在挂起状态时，意味着进程没有占用内存空间，处在挂起状态的进程映射在磁盘上。进程挂起通常有两种状态：</p><ul><li><p>阻塞挂起状态：进程在外存并等待某事件的出现；</p></li><li><p>就绪挂起状态：进程在外存，但只要进入内存即可运行。</p></li></ul><p>有什么与进程挂起相关的状态转换？</p><p>进程挂起可能有以下几种情况：</p><p><strong>阻塞到阻塞挂起</strong>：没有进程处于就绪状态或就绪进程要求更多内存资源时，会进行这种转换，以提交新进程或运行就绪进程；</p><p><strong>就绪到就绪挂起</strong>：当有高优先级阻塞进程或低优先级就绪进程时，系统会选择挂起低优先级就绪进程；</p><p><strong>运行到就绪挂起</strong>：对于抢占式分时系统，当有高优先级阻塞挂起进程因事件出现而进入就绪挂起时，系统可能会把运行进程转到就绪挂起状态；</p><p><strong>阻塞挂起到就绪挂起</strong>：当有阻塞挂起进程有相关事件出现时，系统会把阻塞挂起进程转换为就绪挂起进程。</p><p><strong>有进程挂起那就有进程解挂：指一个进程从外存转到内存，相关状态有</strong>：</p><p><strong>就绪挂起到就绪</strong>：没有就绪进程或就绪挂起进程优先级高于就绪进程时，就会进行这种转换；</p><p><strong>阻塞挂起到阻塞</strong>：当一个进程释放足够内存时，系统会把一个高优先级阻塞挂起进程转换为阻塞进程。</p><hr><h1 id="什么是进程调度操作系统对于进程调度都有什么策略"><a class="markdownIt-Anchor" href="#什么是进程调度操作系统对于进程调度都有什么策略"></a> 什么是进程调度？操作系统对于进程调度都有什么策略？</h1><p>当系统中有多个进程同时竞争CPU，如果只有一个CPU可用，那同一时刻只会有一个进程处于运行状态，操作系统必须要选择下一个要运行的是哪个进程，在操作系统中，完成选择工作的这部分称为调度程序，该程序使用的算法称作<strong>调度算法</strong>。</p><p><strong>什么时候进行调度？</strong></p><ol><li>系统调用创建一个新进程后，需要决定是运行父进程还是运行子进程。</li><li>一个进程退出时需要做出调度决策，需要决定下一个运行的是哪个进程。</li><li>当一个进程阻塞在I/O和信号量或者由于其它原因阻塞时，必须选择另一个进程运行。</li><li>当一个I/O中断发生时，如果中断来自IO设备，而该设备现在完成了工作，某些被阻塞的等待该IO的进程就成为可运行的就绪进程了，是否让新就绪的进程运行，或者让中断发生时运行的进程继续运行，或者让某个其它进程运行，这就取决于调度程序的抉择了。</li></ol><p><strong>调度算法分类</strong>：</p><p><strong>非抢占式调度算法</strong>：挑选一个进程，然后让该进程运行直至被阻塞，或者直到该进程自动释放CPU，即使该进程运行了若干个小时，它也不会被强迫挂起。这样做的结果是，在时钟中断发生时不会进行调度，在处理完时钟中断后，如果没有更高优先级的进程等待，则被中断的进程会继续执行。简单来说，<strong>调度程序必须等待事件结束</strong>。</p><p>非抢占方式引起进程调度的条件：</p><ul><li>进程执行结束，或发生某个事件而不能继续执行</li><li>正在运行的进程因有I/O请求而暂停执行</li><li>进程通信或同步过程中执行了某些原语操作（wait、block等）</li></ul><p><strong>抢占式调度算法</strong>：挑选一个进程，并且让该进程运行某个固定时段的最大值。如果在该时段结束时，该进程仍在运行，它就被挂起，而调度程序挑选另一个进程运行，进行抢占式调度处理，需要在时间间隔的末端发生时钟中断，以便CPU控制返回给调度程序，如果没有可用的时钟，那么非抢占式调度就是唯一的选择。简单来说，<strong>就是当前运行的进程在事件没结束时就可以被换出，防止单一进程长时间独占CPU资源</strong>。下面会介绍很多抢占式调度算法：优先级算法、短作业优先算法、轮转算法等。</p><p><strong>调度策略</strong>：不同系统环境下有不同的调度策略算法。调度算法也是有KPI的，对调度算法首先提的需求就是：</p><ul><li><strong>公平</strong>：调度算法需要给每个进程公平的CPU份额，相似的进程应该得到相似的服务，对一个进程给予较其它等价的进程更多的CPU时间是不公平的，被普通水平的应届生工资倒挂也是不公平的！</li><li><strong>执行力</strong>：每一个策略必须强制执行，需要保证规定的策略一定要被执行。</li><li><strong>平衡</strong>：需要保证系统的所有部分尽可能都忙碌。</li></ul><p>但是因为不同的应用有不同的目标，不同的系统中，调度程序的优化也是不同的，大体可以分为三种环境：</p><br><p><strong>批处理系统</strong></p><blockquote><p>批处理系统的管理者为了掌握系统的工作状态，主要关注三个指标：</p><ul><li>吞吐量：是系统每小时完成的作业数量</li><li>周转时间：指从一个作业提交到完成的平均时间</li><li>CPU利用率：尽可能让CPU忙碌，但又不能过量</li></ul><p><strong>调度算法</strong>：</p><p><strong>先来先服务</strong><br>先来后到嘛，就像平时去商店买东西需要排队一样，使用该算法，进程按照它们请求CPU的顺序来使用CPU，该算法最大的优点就是简单易于实现，太容易的不一定是好的，该算法也有很大的<strong>缺点</strong>：平均等待时间波动较大，时间短的任务可能排队排在了时间长的任务后面。举个生活中的例子，排着队去取快递，如果每个人都很快取出来快递还好，如果前面有几个人磨磨唧唧到快递柜前才拿出手机打开app，再找半分钟它的取件码，就会严重拖慢后面的人取快递的速度，同理排着队的进程如果每个进程都很快就运行完还好，如果其中有一个得到了CPU的进程运行时候磨磨唧唧很长时间都运行不完，那后面的进程基本上就没有机会运行了！</p><p><strong>最短作业优先</strong><br>该调度算法是非抢占式的算法，每个进程执行期间不会被打断，每次都选择执行时间最短的进程来调度，但问题来了，操作系统怎么可能知道进程具体的执行时间呢，所以该算法注定是基于预测性质的理想化算法，而且有违公平性，而且可能导致运行时间长的任务得不到调度。</p><p><strong>最短剩余时间优先</strong><br>该调度算法是抢占式的算法，是最短作业优先的抢占版本，在进程运行期间，如果来了个更短时间的进程，那就转而去把CPU时间调度给这个更短时间的进程，它的缺点和最短作业优先算法类似。</p></blockquote><br><p><strong>交互式系统</strong></p><blockquote><p>对于交互系统最重要的指标就是响应时间和均衡性啦：</p><ul><li>响应时间：一个请求被提交到产生第一次响应所花费的时间。你给别人发微信别人看后不回复你或者几个小时后才回复你，你是什么感受，这还是交互式吗？</li><li>均衡性：减少平均响应时间的波动。需要符合固有期望和预期，你给别人发微信，他有时候秒回复，有时候几个小时后才回复。在交互式系统中，可预测性比高差异低平均更重要。</li></ul><p><strong>调度算法：</strong></p><p><strong>轮转调度</strong><br>每个进程被分配一个时间段，称为时间片，即CPU做到雨露均沾，轮流翻各个进程的牌子，这段时间宠幸进程A，下一段时间宠幸进程B，再下一段时间宠幸进程C，确保每个进程都可以获得CPU时间，如果CPU时间特别短的话，在外部看来像是同时宠幸了所有进程一样。那么问题来了，这个时间片究竟多长时间好呢？如果时间片设的太短会导致过多的进程切换，频繁的上下文切换会降低CPU效率，而如果时间片设的太长又可能对短的交互请求的响应时间变长，通常将时间片设为20-50ms是个比较合理的折中，大佬们的经验规则时维持上下文切换的开销处于1%以内。</p><p><strong>优先级调度</strong><br>上面的轮转调度算法是默认每个进程都同等重要，都有相同优先级，然而有时候进程需要设置优先级，例如某些播放视频的前台进程可以优先于某些收发邮件的后台守护进程被调度，在优先级调度算法中，每个优先级都有相应的队列，队列里面装着对应优先级的进程，首先在高优先级队列中进行轮转调度，当高优先级队列为空时，转而去低优先级队列中进行轮转调度，如果高优先级队列始终不为空，那么低优先级的进程很可能就会饥饿到很久不能被调度。</p><p><strong>多级队列</strong><br>多级队列算法与优先级调度算法不同，优先级算法中每个进程分配的是相同的时间片，而在多级队列算法中，不同队列中的进程分配给不同的时间片，当一个进程用完分配的时间片后就移动到下一个队列中，这样可以更好的避免上下文频繁切换。举例：有一个进程需要100个时间片，如果每次调度都给分配一个时间片，则需要100次上下文切换，这样CPU运行效率较低，通过多级队列算法，可以考虑最开始给这个进程分配1个时间片，然后被换出，下次分给它2个时间片，再换出，之后分给它4、8、16、64个时间片，这样分配的话，该进程只需要7次交换就可以运行完成，相比100次上下文切换运行效率高了不少，但顾此就会失彼，那些需要交互的进程得到响应的速度就会下降。</p><p><strong>最短进程优先</strong><br>交互式系统中应用最短进程优先算法其实是非常适合的，每次都选择执行时间最短的进程进行调度，这样可以使任务的响应时间最短，但这里有个任务，还没有运行呢，我怎么知道进程的运行时间呢？根本没办法非常准确的再当前可运行进程中找出最短的那个进程。有一种办法就是根据进程过去的行为进行预测，但这能证明是个好办法吗？</p><p><strong>保证调度</strong><br>这种调度算法就是向用户做出明确的可行的性能保证，然后去实现它。一种很实际的可实现的保证就是确保N个用户中每个用户都获得CPU处理能力的1/N，类似的，保证N个进程中每个进程都获得1/N的CPU时间。</p><p><strong>彩票调度</strong><br>彩票调度算法基本思想是为进程提供各种资源（CPU时间）的彩票，一旦需要做出调度决策时，就随机抽出一张彩票，拥有该彩票的进程获得该资源，很明显，拥有彩票越多的进程，获得资源的可能性越大。该算法在程序喵看来可以理解为股票算法，将CPU的使用权分成若干股，假设共100股分给了3个进程，给这些进程分别分配20、30、50股，那么它们大体上会按照股权比例（20：30：50）划分CPU的使用。</p><p><strong>公平分享调度</strong><br>假设有系统两个用户，用户1启动了1个进程，用户2启动了9个进程，如果使用轮转调度算法，那么用户1将获得10%的CPU时间，用户2将获得90%的CPU时间，这对用户来说公平吗？如果给每个用户分配50%的CPU时间，那么用户2中的进程获得的CPU时间明显比用户1中的进程短，这对进程来说公平吗？这就取决于怎么定义公平啦？</p></blockquote><br><p><strong>实时系统</strong></p><blockquote><p>实时系统顾名思义，最关键的指标当然是实时啦：</p><ul><li>满足截止时间：需要在规定deadline前完成作业；</li><li>可预测性：可预测性是指在系统运行的任何时刻，在任何情况下，实时系统的资源调配策略都能为争夺资源的任务合理的分配资源，使每个实时任务都能得到满足。</li></ul><p><strong>调度算法分类</strong>：</p><p><strong>硬实时</strong><br>必须在deadline之前完成工作，如果delay，可能会发生灾难性或发生严重的后果；</p><p><strong>软实时</strong><br>必须在deadline之前完成工作，但如果偶尔delay了，也可以容忍。</p><p><strong>调度算法</strong>：</p><p><strong>单调速率调度</strong><br>采用抢占式、静态优先级的策略，调度周期性任务。<br>每个任务最开始都被配置好了优先级，当较低优先级的进程正在运行并且有较高优先级的进程可以运行时，较高优先级的进程将会抢占低优先级的进程。在进入系统时，每个周期性任务都会分配一个优先级，周期越短，优先级越高。这种策略的理由是：更频繁的需要CPU的任务应该被分配更高的优先级。</p><p><strong>最早截止时间调度</strong><br>根据截止时间动态分配优先级，截止时间越早的进程优先级越高。</p><p>该算法中，当一个进程可以运行时，它应该向操作系统通知截止时间，根据截止时间的早晚，系统会为该进程调整优先级，以便满足可运行进程的截止时间要求。它与单调速率调度算法的区别就是一个是静态优先级，一个是动态优先级。</p></blockquote><p><strong>如何配置调度策略</strong>？<br>调度算法有很多种，各有优缺点，操作系统自己很少能做出最优的选择，那么可以把选择权交给用户，由用户根据实际情况来选择适合的调度算法，这就叫策略与机制分离，调度机制位于内核，调度策略由用户进程决定，将调度算法以某种形式参数化，由用户进程来选择参数从而决定内核使用哪种调度算法。</p><hr><h1 id="操作系统怎么完成进程调度"><a class="markdownIt-Anchor" href="#操作系统怎么完成进程调度"></a> 操作系统怎么完成进程调度？</h1><p>进程的每次变化都会有相应的状态，而操作系统维护了一组状态队列，表示系统中所有进程的当前状态；不同的状态有不同的队列，有就绪队列阻塞队列等，每个进程的PCB都根据它的状态加入到相应的队列中，当一个进程的状态发生变化时，它的PCB会从一个状态队列中脱离出来加入到另一个状态队列。</p><p><img src="scheduling.jpg" alt="进程调度"></p><p>注意图中同一种状态为什么有多个队列呢？因为进程有优先级概念，相同状态的不同队列的优先级不同。</p><hr><h1 id="什么是线程"><a class="markdownIt-Anchor" href="#什么是线程"></a> 什么是线程？</h1><p>线程是进程当中的一条执行流程，这几乎就是进程的定义，一个进程内可以有多个子执行流程，即线程。可以从两个方面重新理解进程：</p><ul><li>从资源组合的角度：进程把一组相关的资源组合起来，构成一个资源平台环境，包括地址空间（代码段、数据段），打开的文件等各种资源</li><li>从运行的角度：代码在这个资源平台上的执行流程，然而线程貌似也是这样，但是进程比线程多了资源内容列表样式：那就有一个公式：进程 = 线程 + 共享资源</li></ul><hr><h1 id="为什么使用线程"><a class="markdownIt-Anchor" href="#为什么使用线程"></a> 为什么使用线程？</h1><p>因为要并发编程，在许多情形中同时发生着许多活动，而某些活动有时候会被阻塞，通过将这些活动分解成可以准并行运行的多个顺序流程是必须的，而如果使用多进程方式进行并发编程，进程间的通信也很复杂，并且<strong>维护进程的系统开销较大</strong>：创建进程时分配资源建立PCB，撤销进程时回收资源撤销PCB，进程切换时保存当前进程的状态信息。所以为了使并发编程的开销尽量小，所以引入多线程编程，可以并发执行也可以<strong>共享相同的地址空间</strong>。并行实体拥有共享同一地址空间和所有可用数据的能力，这是多进程模型所不具备的能力。</p><p>使用线程有如下优点：</p><ul><li>可以多个线程存在于同一个进程中</li><li>各个线程之间可以并发的执行</li><li>各个线程之间可以共享地址空间和文件等资源</li><li>线程比进程更轻量级，创建线程撤销线程比创建撤销进程要快的多，在许多系统中，创建一个线程速度是创建一个进程速度的10-100倍。</li><li>如果多个线程是CPU密集型的，并不能很好的获得更好的性能，但如果多个线程是IO密集型的，线程存在着大量的计算和大量的IO处理，有多个线程允许这些活动彼此重叠进行，从而会加快整体程序的执行速度。</li></ul><p>但也有<strong>缺点</strong>：</p><ul><li>一旦一个线程崩溃，会导致其所属进程的所有线程崩溃。</li><li>由于各个线程共享相同的地址空间，那么读写数据可能会导致竞争关系，因此对同一块数据的读写需要采取某些同步机制来避免线程不安全问题。</li></ul><hr><h1 id="什么时候用进程-线程"><a class="markdownIt-Anchor" href="#什么时候用进程-线程"></a> 什么时候用进程、线程？</h1><ol><li>进程是资源分配单位，线程是CPU调度单位；</li><li>进程拥有一个完整的资源平台，而线程只独享必不可少的资源，如寄存器和栈；</li><li>线程同样具有就绪阻塞和执行三种基本状态，同样具有状态之间的转换关系；</li><li>线程能减少并发执行的时间和空间开销：<ul><li>线程的创建时间比进程短</li><li>线程的终止时间比进程短</li><li>同一进程内的线程切换时间比进程短</li><li>由于同一进程的各线程间共享内存和文件资源，可直接进行不通过内核的通信</li></ul></li></ol><p><strong>结论</strong>：可以在强调性能时候使用线程，如果追求更好的容错性可以考虑使用多进程，google浏览器据说就是用的多进程编程。在多CPU系统中，多线程是有益的，在这样的系统中，通常情况下可以做到真正的并行。</p><p><strong>C/C++中如何使用多线程编程？</strong></p><p>POSIX使用如下线程封装函数来操作线程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pthread_create               创建一个新线程</span><br><span class="line">pthread_exit                 结束调用的线程</span><br><span class="line">pthread_join                 等待一个特定的线程退出</span><br><span class="line">pthread_yield                释放CPU来运行另外一个线程</span><br><span class="line">pthread_attr_init            创建并初始化一个线程的属性结构</span><br><span class="line">pthread_attr_destroy         删除一个线程的属性结构</span><br></pre></td></tr></table></figure><p>后两个函数是有关线程属性的调用。pthread_attr_init建立关联一个线程的属性结构并初始化成默认值，这些值（优先级等）可以通过修改属性结构中的对应值来改变；pthread_attr_destroy会删除一个线程的属性结构，释放它占用的内存，它不会影响调用它的线程，线程依然会继续存在。</p><p>C++中有std::thread和async，可以很方便地操作多线程，示例代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">F</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"a"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="function">thread <span class="title">r</span><span class="params">(F)</span></span>;</span><br><span class="line">    r.detach();</span><br><span class="line">    <span class="built_in">std</span>::this_thread::sleep_for(<span class="built_in">std</span>::chrono::seconds(<span class="number">20</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="线程是如何实现的"><a class="markdownIt-Anchor" href="#线程是如何实现的"></a> 线程是如何实现的？</h1><p>线程的实现可分为用户线程和内核线程：</p><p><strong>用户线程</strong>：在用户空间实现的线程机制，它不依赖于操作系统的内核，由一组用户级的线程库函数来完成线程的管理，包括进程的创建终止同步和调度等。</p><p><img src="user_thread.jpg" alt="用户线程"></p><p>用户线程有如下优点：</p><ul><li>由于用户线程的维护由相应进程来完成（通过线程库函数），不需要操作系统内核了解内核了解用户线程的存在，可用于不支持线程技术的多进程操作系统。</li><li>每个进程都需要它自己私有的线程控制块列表，用来跟踪记录它的各个线程的状态信息（PC，栈指针，寄存器），TCB由线程库函数来维护；</li><li>用户线程的切换也是由线程库函数来完成，无需用户态/核心态切换，所以速度特别快；</li><li>允许每个进程拥有自定义的线程调度算法；</li></ul><p>但用户线程也有<strong>缺点</strong>：</p><ul><li>阻塞性的系统调用如何实现？如果一个线程发起系统调用而阻塞，则整个进程在等待。</li><li>当一个线程开始运行后，除非它主动交出CPU的使用权，否则它所在进程当中的其它线程将无法运行；</li><li>由于时间片分配给进程，与其它进程比，在多线程执行时，每个线程得到的时间片较少，执行会较慢</li></ul><p><strong>内核线程</strong>：是指在操作系统的内核中实现的一种线程机制，由操作系统的内核来完成线程的创建终止和管理。</p><p><img src="kernel_thread.jpg" alt="内核线程"></p><p><strong>特点：</strong></p><ul><li>在支持内核线程的操作系统中，由内核来维护进程和线程的上下文信息（PCB TCB）；</li><li>线程的创建终止和切换都是通过系统调用内核函数的方式来进行，由内核来完成，因此系统开销较大；</li><li>在一个进程当中，如果某个内核线程发起系统调用而被阻塞，并不会影响其它内核线程的运行；</li><li>时间片分配给线程，多线程的进程获得更多CPU时间；</li></ul><p><em><strong>tips</strong></em><br>由于在内核中创建或撤销线程的代价比较大，某些系统采取复用的方式回收线程，当某个线程被撤销时，就把它标记不可运行，但是内核数据结构没有受到任何影响，如果后续又需要创建一个新线程时，就重新启动被标记为不可运行的旧线程，从而节省一些开销。</p><p><strong>注意</strong><br>尽管使用内核线程可以解决很多问题，但还有些问题，例如：当一个多线程的进程创建一个新的进程时会发生什么？新进程是拥有与原进程相同数量的线程还是只有一个线程？在很多情况下，最好的选择取决于进程计划下一步做什么？如果它要调用exec启动一个新程序，或许一个线程正合适，但如果它继续运行，那么最好复制所有的线程。</p><p><strong>轻量级进程</strong>：它是内核支持的用户线程模型，一个进程可以有多个轻量级进程，每个轻量级进程由一个单独的内核线程来支持。</p><p><img src="LWP.jpg" alt="轻量级进程"></p><p>在Linux下是没有真正的线程的，它所谓的线程其实就是使用进程来实现的，就是所谓的轻量级进程，其实就是进程，都是通过clone接口调用创建的，只不过两者传递的参数不同，通过参数决定子进程和父进程共享的资源种类和数量，进而有了普通进程和轻量级进程的区别。</p><hr><h1 id="什么是上下文切换"><a class="markdownIt-Anchor" href="#什么是上下文切换"></a> 什么是上下文切换？</h1><p>上下文切换指的是操作系统停止当前运行进程（从运行状态改变成其它状态）并且调度其它进程（就绪态转变成运行状态）。操作系统必须在切换之前存储许多部分的进程上下文，必须能够在之后恢复他们，所以进程不能显示它曾经被暂停过，同时切换上下文这个过程必须快速，因为上下文切换操作是非常频繁的。那<strong>上下文指的是什么呢</strong>？指的是任务所有共享资源的工作现场，每一个共享资源都有一个<strong>工作现场</strong>，包括用于处理函数调用、局部变量分配以及工作现场保护的栈顶指针，和用于指令执行等功能的各种寄存器。</p><p><strong>注意</strong><br>这里所说的进程切换导致上下文切换其实不太准确，准确的说应该是任务的切换导致上下文切换，这里的任务可以是进程也可以是线程，准确的说线程才是CPU调度的基本单位，但是因为各个资料都这么解释上下文切换，所以上面也暂时这么介绍，只要读者心里有这个概念就好。</p><p><img src="context.png" alt="上下文切换"></p><hr><h1 id="进程间通信有几种方式"><a class="markdownIt-Anchor" href="#进程间通信有几种方式"></a> 进程间通信有几种方式？</h1><p>由于各个进程不共享相同的地址空间，任何一个进程的全局变量在另一个进程中都不可见，所以如果想要在进程之间传递数据就需要通过内核，在内核中开辟出一块区域，该区域对多个进程都可见，即可用于进程间通信。有读者可能有疑问了，文件方式也是进程间通信啊，也要在内核开辟区域吗？这里说的内核区域其实是一段缓冲区，文件方式传输数据也有内核缓冲区的参与（零拷贝除外）。</p><p><img src="IPC.jpg" alt="进程间通信"></p><p>如何开辟这种公共区域来进行进程间通信呢？</p><p><strong>匿名管道</strong></p><p>匿名管道就是<strong>pipe</strong>，pipe只能在父子进程间通信，而且数据只能<strong>单向流动</strong>（半双工通信）。</p><p><strong>使用方式</strong>：<br>1）父进程创建管道，会得到两个文件描述符，分别指向管道的两端；<br>2）父进程创建子进程，从而子进程也有两个文件描述符指向同一管道；<br>3）父进程可写数据到管道，子进程就可从管道中读出数据，从而实现进程间通信，下面的示例代码中通过pipe实现了每秒钟父进程向子进程都发送消息的功能。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _pipe[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> ret = pipe(_pipe);</span><br><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"pipe\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">pid_t</span> id = fork();</span><br><span class="line">    <span class="keyword">if</span> (id &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"fork\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (id == <span class="number">0</span>) &#123;  <span class="comment">// 子进程</span></span><br><span class="line">        close(_pipe[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> _mesg[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">while</span> (j &lt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(_mesg, <span class="string">'\0'</span>, <span class="keyword">sizeof</span>(_mesg));</span><br><span class="line">            read(_pipe[<span class="number">0</span>], _mesg, <span class="keyword">sizeof</span>(_mesg));</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, _mesg);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 父进程</span></span><br><span class="line">        close(_pipe[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> *mesg = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="number">100</span>) &#123;</span><br><span class="line">            mesg = <span class="string">"父进程来写消息了"</span>;</span><br><span class="line">            write(_pipe[<span class="number">1</span>], mesg, <span class="built_in">strlen</span>(mesg) + <span class="number">1</span>);</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">            ++i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们平时也经常使用关于管道的命令行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls | less</span><br></pre></td></tr></table></figure><p>该命令行的流向图如下：</p><p><img src="unnamed_pipe.jpg" alt="命令行流向图"></p><p>1：创建管道<br>2：为ls创建一个进程，设置stdout为管理写端<br>3：为less创建一个进程，设置stdin为管道读端</p><p><strong>高级管道</strong><br>通过<strong>popen</strong>将另一个程序当作一个新的进程在当前进程中启动，它算作当前进程的子进程，高级管道只能用在有亲缘关系的进程间通信，这种亲缘关系通常指父子进程，下面的GetCmdResult函数可以获取某个Linux命令执行的结果，实现方式就是通过popen。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">GetCmdResult</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;cmd, <span class="keyword">int</span> max_size = <span class="number">10240</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *data = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(max_size);</span><br><span class="line">    <span class="keyword">if</span> (data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">"malloc fail"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(data, <span class="number">0</span>, max_size);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> max_buffer = <span class="number">256</span>;</span><br><span class="line">    <span class="keyword">char</span> buffer[max_buffer];</span><br><span class="line">    <span class="comment">// 将标准错误重定向到标准输出</span></span><br><span class="line">    FILE *fdp = popen((cmd + <span class="string">" 2&gt;&amp;1"</span>).c_str(), <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">int</span> data_len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fdp) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!feof(fdp)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fgets(buffer, max_buffer, fdp)) &#123;</span><br><span class="line">                <span class="keyword">int</span> len = <span class="built_in">strlen</span>(buffer);</span><br><span class="line">                <span class="keyword">if</span> (data_len + len &gt; max_size) &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">"data size larger than "</span> &lt;&lt; max_size;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">memcpy</span>(data + data_len, buffer, len);</span><br><span class="line">                data_len += len;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pclose(fdp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">ret</span><span class="params">(data, data_len)</span></span>;</span><br><span class="line">    <span class="built_in">free</span>(data);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>命名管道</strong><br>匿名管道有个缺点就是通信的进程一定要有亲缘关系，而命名管道就不需要这种限制。</p><p>命名管道其实就是一种特殊类型的文件，所谓的命名其实就是文件名，文件对各个进程都可见，通过命名管道创建好特殊文件后，就可以实现进程间通信。</p><p>可以通过mkfifo创建一个特殊的类型的文件，参数读者看名字应该就了解，一个是文件名，一个是文件的读写权限：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mkfifo</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* filename, <span class="keyword">mode_t</span> mode)</span></span>;</span><br></pre></td></tr></table></figure><p>当返回值为0时，表示该命名管道创建成功，至于如何通信，其实就是个读写文件的问题！</p><p><strong>消息队列</strong><br>队列想必大家都知道，像FIFO一样，这里可以有多个进程写入数据，也可以有多个进程从队列里读出数据，但消息队列有一点比FIFO还更高级，它读消息不一定要使用先进先出的顺序，每个消息可以赋予类型，可以按消息的类型读取，不是指定类型的数据还存在队列中。本质上MessageQueue是存放在内核中的消息链表，每个消息队列链表会由消息队列标识符表示，这个消息队列存于内核中，只有主动的删除该消息队列或者内核重启时，消息队列才会被删除。</p><p>在Linux中消息队列相关的函数调用如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 创建和访问一个消息队列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgget</span><span class="params">(<span class="keyword">key_t</span>, key, <span class="keyword">int</span> msgflg)</span></span>;</span><br><span class="line"><span class="comment">// 用来把消息添加到消息队列中</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgsend</span><span class="params">(<span class="keyword">int</span> msgid, <span class="keyword">const</span> <span class="keyword">void</span> *msg_ptr, <span class="keyword">size_t</span> msg_sz, <span class="keyword">int</span> msgflg)</span></span>;</span><br><span class="line"><span class="comment">// msg_ptr是结构体数据的指针，结构第一个字段要有个类型：struct Msg &#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> message_type;</span><br><span class="line">    <span class="comment">// 想要传输的数据</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 从消息队列中获取消息</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgrcv</span><span class="params">(<span class="keyword">int</span> msgid, <span class="keyword">void</span> *msg_ptr, <span class="keyword">size_t</span> msg_st, <span class="keyword">long</span> <span class="keyword">int</span> msgtype, <span class="keyword">int</span> msgflg)</span></span>;</span><br><span class="line"><span class="comment">// 用来控制消息队列，不同的command参数有不同的控制方式</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgctl</span><span class="params">(<span class="keyword">int</span> msgid, <span class="keyword">int</span> command, struct msgid_ds *buf)</span></span>;</span><br></pre></td></tr></table></figure><p>示例代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZ 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> msg_type;</span><br><span class="line">    <span class="keyword">char</span> text[BUFFER_SIZ];</span><br><span class="line">&#125; MsgWrapper;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Receive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MsgWrapper data;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> msgtype = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> msgid = msgget((<span class="keyword">key_t</span>)<span class="number">1024</span>, <span class="number">0666</span> | IPC_CREAT);</span><br><span class="line">    <span class="keyword">if</span> (msgid == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"msgget error \n"</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (msgrcv(msgid, (<span class="keyword">void</span> *)&amp;data, BUFFER_SIZ, msgtype, <span class="number">0</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"error "</span> &lt;&lt; errno &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"read data "</span> &lt;&lt; data.text &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strlen</span>(data.text) &gt; <span class="number">6</span>) &#123;  <span class="comment">// 发送超过6个字符的数据，结束</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (msgctl(msgid, IPC_RMID, <span class="number">0</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"msgctl error \n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Receive ok \n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    MsgWrapper data;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> msgtype = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> msgid = msgget((<span class="keyword">key_t</span>)<span class="number">1024</span>, <span class="number">0666</span> | IPC_CREAT);</span><br><span class="line">    <span class="keyword">if</span> (msgid == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"msgget error \n"</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    data.msg_type = msgtype;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(data.text, <span class="number">0</span>, BUFFER_SIZ);</span><br><span class="line">        <span class="keyword">char</span> a = <span class="string">'a'</span> + i;</span><br><span class="line">        <span class="built_in">memset</span>(data.text, a, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (msgsnd(msgid, (<span class="keyword">void</span> *)&amp;data, BUFFER_SIZ, <span class="number">0</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"msgsnd error \n"</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">std</span>::this_thread::sleep_for(<span class="built_in">std</span>::chrono::seconds(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(data.text, <span class="string">"1234567"</span>, <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">if</span> (msgsnd(msgid, (<span class="keyword">void</span> *)&amp;data, BUFFER_SIZ, <span class="number">0</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"msgsnd error \n"</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="function">thread <span class="title">r</span><span class="params">(Receive)</span></span>;</span><br><span class="line">    r.detach();</span><br><span class="line">    <span class="built_in">std</span>::<span class="function">thread <span class="title">s</span><span class="params">(Send)</span></span>;</span><br><span class="line">    s.detach();</span><br><span class="line">    <span class="built_in">std</span>::this_thread::sleep_for(<span class="built_in">std</span>::chrono::seconds(<span class="number">20</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：root@iZuf64idor3ej648ciairaZ:~# ./a.out</span><br><span class="line">read data a</span><br><span class="line">read data b</span><br><span class="line">read data c</span><br><span class="line">read data d</span><br><span class="line">read data e</span><br><span class="line">read data f</span><br><span class="line">read data g</span><br><span class="line">read data h</span><br><span class="line">read data i</span><br><span class="line">read data j</span><br><span class="line">read data <span class="number">1234567</span></span><br><span class="line">Receive ok</span><br></pre></td></tr></table></figure><p>代码中为了演示方便使用消息队列进行的线程间通信，该代码同样用于进程间通信，消息队列的实现依赖于内核的支持，上述代码可能在某些系统（WSL）上不能运行，在正常的Ubuntu上可以正常运行。</p><p><strong>消息队列VS命名管道</strong></p><p><strong>消息队列&gt;命名管道</strong></p><p>1）消息队列收发消息自动保证了同步，不需要由进程自己来提供同步方法，而命名管道需要自行处理同步问题；<br>2）消息队列接收数据可以根据消息类型有选择的接收特定类型的数据，不需要像命名管道一样默认接收数据。</p><p><strong>消息队列&lt;命名管道</strong><br>消息队列有一个缺点就是发送和接收的每个数据都有最大长度的限制。</p><p><strong>共享内存</strong><br>可开辟中一块内存，用于各个进程间共享，使得各个进程可以直接读写同一块内存空间，就像线程共享同一块地址空间一样，该方式基本上是最快的进程间通信方式，因为没有系统调用干预，也没有数据的拷贝操作，但由于共享同一块地址空间，数据竞争的问题就会出现，需要自己引入同步机制解决数据竞争问题。</p><p>共享内存只是一种方式，它的实现方式有很多种，主要的有mmap系统调用、Posix共享内存以及System V共享内存等。通过这三种“工具”共享地址空间后，通信的目的自然就会达到。</p><p><strong>信号</strong><br>信号也是进程间通信的一种方式，信号可以在任何时候发送给某一个进程，如果进程当前并未处于执行状态，内核将信号保存，直到进程恢复到执行态再发送给进程，进程可以对信号设置预处理方式，如果对信号设置了阻塞处理，则信号的传递会被延迟直到阻塞被取消，如果进程结束，那信号就被丢弃。我们常用的CTRL+C和kill等就是信号的一种，也达到了进程间通信的目的，进程也可以对信号设置signal捕获函数自定义处理逻辑。这种方式有很大的<strong>缺点</strong>：只有通知的作用，通知了一下消息的类型，但不能传输要交换的任何数据。</p><p>Linux系统中常见的信号有：</p><ul><li>SIGHUP：该信号在用户终端结束时发出，通常在中断的控制进程结束时，所有进程组都将收到该信号，该信号的默认操作是终止进程；</li><li>SIGINT：程序终止信号，通常的CTRL+C产生该信号来通知终止进程；</li><li>SIGQUIT：类似于程序错误信号，通常的CTRL+\产生该信号通知进程退出时产生core文件；</li><li>SIGILL：执行了非法指令，通常数据段或者堆栈溢出可能产生该信号；</li><li>SIGTRAP：供调试器使用，由断电指令或其它陷阱指令产生；</li><li>SIGABRT：使程序非正常结束，调用abort函数会产生该信号；</li><li>SIGBUS：非法地址，通常是地址对齐问题导致，比如访问一个4字节长的整数，但其地址不是4的倍数；</li><li>SIGSEGV：合理地址的非法访问，访问了未分配的内存或者没有权限的内存区域；</li><li>SIGPIPE：管道破裂信号，socket通信时经常会遇到，进程写入了一个无读者的管道；</li><li>SIGALRM：时钟定时信号，由alarm函数设置的时间终止时产生；</li><li>SIGFPE：出现浮点错误（比如除0操作）；</li><li>SIGKILL：杀死进程（不能被捕捉和忽略）；</li></ul><p><strong>信号量</strong><br>想必大家都听过信号量，信号量就是一个特殊的变量，程序对其访问都是原子操作，每个信号量开始都有个初始值。最简单最常见的信号量是只能取0和1的变量，也叫二值信号量。</p><p>信号量有两个操作，P和V：</p><p>P：如果信号量变量值大于0，则变量值减1，如果值为0，则阻塞进程；<br>V：如果有进程阻塞在该信号量上，则唤醒阻塞的进程，如果没有进程阻塞，则变量值加1</p><blockquote><p>Q: 信号量和信号有什么关系？<br>A: 没有任何关系，完全是不同的东西。</p></blockquote><blockquote><p>Q: 信号量与互斥量有什么区别？<br>A: 互斥量用于<strong>互斥</strong>，信号量用于<strong>同步</strong>，互斥指的是某一资源同一时间只允许一个访问者访问，但无法限制访问顺序，访问是无序的，而同步在互斥的基础上可以控制访问者对资源的顺序。</p></blockquote><p><strong>套接字</strong>：就是网络传输，不用多说，网络通信都可以多机通信呢，更不用说进程间通信啦，你能看到程序喵的文章也是套接字的功劳。</p><p><strong>文件</strong>：显而易见，多个进程可以操作同一个文件，所以也可以通过文件来进行进程间通信。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文转载自&lt;a href=&quot;https://mp.weixin.qq.com/s/4uhfJeYwQgzd6A6nTBj_Gg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这篇文章&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="线程" scheme="https://taosean.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="进程" scheme="https://taosean.github.io/tags/%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="Process" scheme="https://taosean.github.io/tags/Process/"/>
    
      <category term="Thread" scheme="https://taosean.github.io/tags/Thread/"/>
    
  </entry>
  
  <entry>
    <title>【转载】5万字、97 张图总结操作系统核心知识点</title>
    <link href="https://taosean.github.io//2020/12/10/OS/"/>
    <id>https://taosean.github.io//2020/12/10/OS/</id>
    <published>2020-12-10T11:37:30.000Z</published>
    <updated>2020-12-10T12:24:22.161Z</updated>
    
    <content type="html"><![CDATA[<p>本文章介绍了操作系统的一些核心知识点。</p><h2 id="文章地址"><a class="markdownIt-Anchor" href="#文章地址"></a> <a href="https://mp.weixin.qq.com/s/G4Xs8BDYo8YK4qHuGdB7DA" target="_blank" rel="noopener">文章地址</a></h2><a id="more"></a><p>文章从以下几个方面对操作系统进行了介绍:</p><ol><li><strong>计算机硬件</strong><br><img src="hardware.png" alt="计算机硬件"></li><li><strong>进程和线程</strong><ul><li>进程</li><li>线程</li><li>进程间通信</li><li>调度<br><img src="process.jpg" alt="进程和线程"></li></ul></li><li><strong>内存管理</strong><ul><li>地址空间</li><li>虚拟内存</li><li>页表置换算法<br><img src="memory.png" alt="内存管理"></li></ul></li><li><strong>文件系统的实现</strong><ul><li>文件</li><li>目录</li><li>文件系统的实现</li><li>文件系统的管理和优化<br><img src="filesystem.png" alt="文件系统"></li></ul></li><li><strong>I/O 流程</strong><ul><li>I/O 设备</li><li>I/O 软件原理</li><li>I/O 层次结构</li><li>盘</li><li>时钟<br><img src="IO.png" alt="I/O 流程"></li></ul></li><li><strong>资源</strong><br><img src="resource.png" alt="资源"></li></ol><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文章介绍了操作系统的一些核心知识点。&lt;/p&gt;
&lt;h2 id=&quot;文章地址&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#文章地址&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://mp.weixin.qq.com/s/G4Xs8BDYo8YK4qHuGdB7DA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文章地址&lt;/a&gt;&lt;/h2&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="https://taosean.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="OS" scheme="https://taosean.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>理解 Non-local</title>
    <link href="https://taosean.github.io//2020/11/05/Understanding-Non-local/"/>
    <id>https://taosean.github.io//2020/11/05/Understanding-Non-local/</id>
    <published>2020-11-05T09:06:59.000Z</published>
    <updated>2020-12-10T11:35:58.355Z</updated>
    
    <content type="html"><![CDATA[<p>之前一直没有深入地了解 Non-local 的来源，以为只是同名论文中提出的一个 Block 设计，最近阅读 AlphAction 论文时，突然发现其是来自于 Attention is all you need 中 self-attention 的思想。虽然 Attention 此文是针对 NLP 领域的，但是其思想逐渐被延伸到了视觉领域。在阅读关于 Transformer 中 self-attention 的文章后，在这里记录下对 Non-local 的理解。</p><a id="more"></a><p>首先介绍 Self-Attention</p><h1 id="self-attention-模块"><a class="markdownIt-Anchor" href="#self-attention-模块"></a> Self-attention 模块</h1><h2 id="公式"><a class="markdownIt-Anchor" href="#公式"></a> 公式</h2><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>t</mi><mi>t</mi><mi>e</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi><mo stretchy="false">(</mo><mi>Q</mi><mo separator="true">,</mo><mi>K</mi><mo separator="true">,</mo><mi>V</mi><mo stretchy="false">)</mo><mo>=</mo><mi>s</mi><mi>o</mi><mi>f</mi><mi>t</mi><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mfrac><mrow><mi>A</mi><msup><mi>K</mi><mi>T</mi></msup></mrow><msqrt><msub><mi>d</mi><mi>k</mi></msub></msqrt></mfrac><mo stretchy="false">)</mo><mi>V</mi></mrow><annotation encoding="application/x-tex">Attention(Q,K,V)=softmax({AK^T\over\sqrt{d_k}})V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault">t</span><span class="mord mathdefault">t</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord mathdefault">Q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.448331em;vertical-align:-0.93em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">t</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5183309999999999em;"><span style="top:-2.25278em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.81722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.18278000000000005em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span></span></span></span></p><blockquote><p>在 self-attention 中，每个单词有 3 个不同的向量，它们分别是 Query 向量（ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">Q</span></span></span></span> ），Key 向量（ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span> ）和 Value 向量（ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span></span></span> ），长度均是 64。<strong>它们是通过3个不同的权值矩阵由嵌入向量 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span></span></span></span> 乘以三个不同的权值矩阵 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>W</mi><mi>Q</mi></msup></mrow><annotation encoding="application/x-tex">W^Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">Q</span></span></span></span></span></span></span></span></span></span></span> ， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>W</mi><mi>K</mi></msup></mrow><annotation encoding="application/x-tex">W^K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">K</span></span></span></span></span></span></span></span></span></span></span> ， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>W</mi><mi>V</mi></msup></mrow><annotation encoding="application/x-tex">W^V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.22222em;">V</span></span></span></span></span></span></span></span></span></span></span> 得到，其中三个矩阵的尺寸也是相同的</strong>。均是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>512</mn><mo>×</mo><mn>416</mn></mrow><annotation encoding="application/x-tex">512\times416</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">5</span><span class="mord">1</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span><span class="mord">1</span><span class="mord">6</span></span></span></span> 。</p></blockquote><br><p><img src="QKV.jpg" alt="Q, K, V的计算示例图"></p><h2 id="attention-的计算方法"><a class="markdownIt-Anchor" href="#attention-的计算方法"></a> Attention 的计算方法</h2><ol><li>将输入单词转化成嵌入向量;</li><li>根据嵌入向量得到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span> 三个向量;</li><li>为每个向量计算一个 score: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>e</mi><mo>=</mo><mi>q</mi><mo>⋅</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">score=q\cdot{k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.63889em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span></span>;</li><li>为了梯度的稳定，Transformer 使用了 score 归一化，即除以 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><msub><mi>d</mi><mi>k</mi></msub></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{d_k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.18278000000000005em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.85722em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathdefault">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.81722em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewbox="0 0 400000 1080" preserveaspectratio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z"/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.18278000000000005em;"><span></span></span></span></span></span></span></span></span>;</li><li>对 score 施以 softmax 激活函数;</li><li>softmax 点乘 Value 值 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>，得到加权的每个输入向量的评分 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>;</li><li>相加之后得到最终的输出结果 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi></mrow><annotation encoding="application/x-tex">z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span>: <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi><mo>=</mo><mo>∑</mo><mi>v</mi></mrow><annotation encoding="application/x-tex">z=\sum{v}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span></span></li></ol><p>以上步骤可以表示成下图</p><p><img src="self-attention.jpg" alt="Self-Attention计算示例图"></p><p>实际计算过程中是采用基于矩阵的计算方式，那么论文中的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Q</mi></mrow><annotation encoding="application/x-tex">Q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">Q</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span></span></span></span> 的计算方式如下图<br><img src="QKV-M.jpg" alt="Q, K, V的矩阵表示"></p><p>Self-Attention 的计算示例图可以总结为下图所示的矩阵形式<br><img src="self-attention-M.jpg" alt="Selef-Attention的矩阵表示"><br>而这，也是公式的计算方式。</p><hr><p>接下来看 Non-local 模块</p><h1 id="non-local-的图像"><a class="markdownIt-Anchor" href="#non-local-的图像"></a> Non-local 的图像</h1><p><img src="original-nonlocal.jpg" alt="原始的 Non-local"></p><p><img src="lfb-nonlocal.jpg" alt="lfb 中的 Non-local"></p><p><img src="alphaction-nonlocal.jpg" alt="AlphAction 中的 Non-local"></p><p>从 AlphAction 的 Non-local 可以看出，<br><code>Q</code> 的尺寸是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>×</mo><mi>d</mi></mrow><annotation encoding="application/x-tex">N\times{d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">d</span></span></span></span></span>, <code>K</code> 的尺寸是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>N</mi><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msup><mo>×</mo><mi>d</mi></mrow><annotation encoding="application/x-tex">N^{&#x27;}\times{d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0258099999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-2.94248em;margin-right:0.05em;"><span class="pstrut" style="height:2.57948em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">d</span></span></span></span></span>, <code>Q</code> 与 <code>K转置</code>进行矩阵乘法，对应的就是第三步 <strong>计算 score</strong> 的过程(<code>Q</code>的每一行与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>K</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">K^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>的每一列点乘)。<br>接下来的 <code>Scale</code> 操作对应第四步 <strong>score 归一化</strong> 的过程。<br>再接下来，Softmax 的输出结果（尺寸 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>×</mo><msup><mi>N</mi><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msup></mrow><annotation encoding="application/x-tex">N\times{N^{&#x27;}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.94248em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-2.94248em;margin-right:0.05em;"><span class="pstrut" style="height:2.57948em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>）与 <code>V</code> 进行矩阵乘法，得到最后尺寸为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>×</mo><mi>d</mi></mrow><annotation encoding="application/x-tex">N\times{d}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">d</span></span></span></span></span> 的矩阵。这里，可以看作 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>×</mo><msup><mi>N</mi><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msup></mrow><annotation encoding="application/x-tex">N\times{N^{&#x27;}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.94248em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-2.94248em;margin-right:0.05em;"><span class="pstrut" style="height:2.57948em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span> 矩阵的每一行分别与 <code>V</code> 相乘，即 <code>V</code> 的每一行的加权和。<br>其实，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>Q</mi><mo>×</mo><msup><mi>K</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">Q\times{K^{T}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">Q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span></span></span> 结果的每一行，来自于 <code>Q</code> 的每一行与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>K</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">K^{T}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span></span> 进行矩阵相乘，即 <code>Q</code> 的一个向量与 <code>K</code> 所有向量的点积。而<strong>最后计算 <code>V</code> 矩阵每一行的加权和时的权重就来自这里</strong>。</p><p>所以，整个 Non-local 的流程，整体感觉就是通过对 <code>Q</code>, <code>K</code> 的处理，得到了 <code>N</code> 组长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>N</mi><msup><mrow></mrow><mo mathvariant="normal">′</mo></msup></msup></mrow><annotation encoding="application/x-tex">N^{&#x27;}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.94248em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-2.94248em;margin-right:0.05em;"><span class="pstrut" style="height:2.57948em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span> 的权重，并对 <code>V</code> 的每一行进行加权和。</p><p><strong>补充解释</strong>: Self-Attention 真实的意图是，通过 <code>Q</code> 与 <code>K</code> 进行 <code>score</code> 的计算，并以 <code>score</code> 作为 <code>V</code> 被 <code>Q</code> 所激活的程度的度量，并因此选择出激活程度最高的 <code>V</code> 中的特征向量，计算加权和。最后，将加权和与原始的 <code>Q</code> 进行相加，得到更新后的 <code>Q</code>。而这个更新后的 <code>Q</code>，就是获得了 attention 的 <code>Q</code>。在视频理解领域，目的就是通过 Self-attention 将来自其他人和物体的上下文信息加到 <code>Q</code> 所代表的人身上，以辅助后续分类。</p><p>AlphAction 中 3.2 节的解释如下</p><blockquote><p>Through the dot-product attention, which is the output of the softmax layer in Figure 3 a, the block is able to select value features that are highly activated to the query features and merge them to enhance the query features.</p></blockquote><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><p><a href="https://zhuanlan.zhihu.com/p/48508221" target="_blank" rel="noopener">详解Transformer （Attention Is All You Need）</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前一直没有深入地了解 Non-local 的来源，以为只是同名论文中提出的一个 Block 设计，最近阅读 AlphAction 论文时，突然发现其是来自于 Attention is all you need 中 self-attention 的思想。虽然 Attention 此文是针对 NLP 领域的，但是其思想逐渐被延伸到了视觉领域。在阅读关于 Transformer 中 self-attention 的文章后，在这里记录下对 Non-local 的理解。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Non-local" scheme="https://taosean.github.io/tags/Non-local/"/>
    
      <category term="attention" scheme="https://taosean.github.io/tags/attention/"/>
    
      <category term="Transformer" scheme="https://taosean.github.io/tags/Transformer/"/>
    
  </entry>
  
  <entry>
    <title>打包 Python 工程</title>
    <link href="https://taosean.github.io//2019/10/29/Packaging-Python/"/>
    <id>https://taosean.github.io//2019/10/29/Packaging-Python/</id>
    <published>2019-10-29T09:00:59.000Z</published>
    <updated>2020-10-16T07:54:17.490Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了两个用来将 Python 工程的依赖进行打包以便于部署的 Python 库。</p><a id="more"></a><ol><li>PEX <a href="https://github.com/pantsbuild/pex" target="_blank" rel="noopener">github</a> <a href="https://pex.readthedocs.io/" target="_blank" rel="noopener">文档</a> <a href="https://medium.com/ovni/pex-python-executables-c0ea39cee7f1" target="_blank" rel="noopener">博客</a></li><li>shiv <a href="https://github.com/linkedin/shiv" target="_blank" rel="noopener">github</a> <a href="https://shiv.readthedocs.io/en/latest/" target="_blank" rel="noopener">文档</a></li></ol><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了两个用来将 Python 工程的依赖进行打包以便于部署的 Python 库。&lt;/p&gt;
    
    </summary>
    
    
      <category term="PEX" scheme="https://taosean.github.io/tags/PEX/"/>
    
      <category term="shiv" scheme="https://taosean.github.io/tags/shiv/"/>
    
      <category term="dependencies" scheme="https://taosean.github.io/tags/dependencies/"/>
    
      <category term="依赖" scheme="https://taosean.github.io/tags/%E4%BE%9D%E8%B5%96/"/>
    
      <category term="python" scheme="https://taosean.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>将 Tensorflow 模型移植到 Caffe 上</title>
    <link href="https://taosean.github.io//2019/10/22/Convert-Tensorflow-Model-to-Caffe/"/>
    <id>https://taosean.github.io//2019/10/22/Convert-Tensorflow-Model-to-Caffe/</id>
    <published>2019-10-22T07:32:49.000Z</published>
    <updated>2020-10-16T08:49:35.786Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要以 cosine metric learning 工程为例，记录了如何将一个 Tensorflow 模型 (包含 ckpt 文件) 移植到 Caffe 框架下。</p><a id="more"></a><h1 id="流程"><a class="markdownIt-Anchor" href="#流程"></a> 流程</h1><blockquote><ol><li>根据 Tensorflow 的网络定义源码，手动编写 Caffe 的网络定义文件 *.prototxt.</li><li>将训练好的 ckpt 文件中的参数 dump 到磁盘，存为 npy 文件。</li><li>使用 pycaffe API, 加载 prototxt 文件，生成 Net 对象。</li><li>根据 npy 文件与 Net 对象中网络层的对应关系，将 npy 文件中的值赋给 Net 对象中的参数。</li><li>将 Net 对象保存为 caffemodel 文件到磁盘。</li></ol></blockquote><br><h1 id="一些应该注意的点"><a class="markdownIt-Anchor" href="#一些应该注意的点"></a> 一些应该注意的点</h1><blockquote><p><strong>1</strong>. Tensorflow 中的 BN 层对应 Caffe 中的两个层，BatchNorm + Scale. 这是因为 Batch Normalization 算法最后有一个 缩放+偏置 的操作，这就对应 Caffe 中的 Scale 层。通常 Scale 层的缩放参数记为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>γ</mi></mrow><annotation encoding="application/x-tex">\gamma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span></span></span></span>, 偏置参数记为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span></span></span></span>. 有时候，从 ckpt 模型中 dump 出的 npy 文件没有 BN 层对应的 gamma 值，这可能是因为其在训练时没有使用缩放（batch_norm 函数的 scale 参数设为了 None ），也就是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>γ</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\gamma=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>。因此在流程第 4 步时，将相应 shape 的值全为 1 的 ndarray 赋给 Net 对象中 Scale 层对应的 gamma 即可，即 <code>net.params[conv1_scale][0].data[...] = np.ones(bn_beta)</code>. 此外，若 npy 文件中有 BN 层对应的 beta 值，则在 prototxt 文件中对应的 Scale 层应设置 <code>bias_term: true</code>，因为这里的 beta 值就是 bias term. <a href="https://blog.csdn.net/zziahgf/article/details/78843350" target="_blank" rel="noopener">参考1</a> <a href="https://www.cnblogs.com/LaplaceAkuir/p/7811383.html" target="_blank" rel="noopener">参考2</a></p></blockquote><hr><blockquote><p><strong>2</strong>. ckpt 中 dump 出的 npy 文件中可能没有某些 Convolution 层的 bias 权重。因此，在 prototxt 文件中，为此 Convolution 层设置 <code>bias_term: false</code>.</p></blockquote><hr><blockquote><p><strong>3</strong>. 在从 ckpt 中 dump 出来的参数里，有些可能名如 <code>*/Adam</code>, <code>*/Adam_1</code>，这个是因为模型使用了 Adam 优化器，这两个是对某个参数更新的时候使用的，如果只是在测试阶段进行前向推导，则不需要这两个参数。<a href="https://www.jianshu.com/p/75d8df8511bc" target="_blank" rel="noopener">参考</a><br>但是如果是需要对模型进行 Finetune, 出现大量 Adam 变量丢失的错误，则有可能是 <strong>要恢复的变量的位置</strong> 和 <strong>Adam 优化器的位置</strong> 出错造成的。<a href="https://blog.csdn.net/shwan_ma/article/details/82868751" target="_blank" rel="noopener">【tensorflow】加载pretrained model出现的大量adam变量丢失</a></p></blockquote><hr><blockquote><p><strong>4</strong>. 一些 Tensorflow 的项目使用 <code>tf.image.decode_jpeg()</code> 函数来读取 jpg 图像，要注意的是，如果直接使用此函数的默认 <code>dct_method</code> 的话，此函数读取到的值将会跟 <code>cv2.imread()</code> 读取的值不一致。这是因为 <code>tf.image.decode_jpeg()</code> 函数默认会为了解码速度而牺牲一些解码精度。如果想要获得跟 <code>cv2.imread()</code> 相同的结果的话，设置参数 <code>dct_method='INTEGER_ACCURATE'</code>。<a href="https://github.com/tensorflow/tensorflow/issues/24893#issuecomment-454911098" target="_blank" rel="noopener">参考1</a> <a href="https://stackoverflow.com/a/45520846/8149027" target="_blank" rel="noopener">参考2</a><br>此外，<code>tf.image.decode_jpeg()</code> 函数返回的图像是 <code>RGB</code> 通道的，<code>cv2.imread()</code> 是 <code>BGR</code> 通道。</p></blockquote><hr><blockquote><p><strong>5</strong>. <strong>Tensorflow 和 Caffe 在某些操作上的区别</strong><br>  <strong>5-1</strong>. <strong>Feature map 以及 卷积核 维度顺序的区别</strong><br>在 Tensorflow 中，feature map 的默认索引顺序是 <code>NHWC</code>, 卷积核是 <code>HWIO</code>，而 Caffe 中两者的索引顺序是 <code>NCHW</code> 和 <code>OIHW</code>.<br>需要说明的是，如果输入是完全一样的图片，在将图像以及卷积核按各自索引顺序 transpose 好后，后续生成的 feature map 在理论上来说应是完全一样的，它们只是索引的顺序不一样而已(feature map 内部各元素之间的相对顺序是一致的)。</p></blockquote><blockquote><p>  <strong>5-2</strong>. <strong>Flatten 操作的区别</strong><br>据上文所述，同样的输入以及卷积核在不同框架中计算得到的 feature map 是一致的。但是如果要对 feature map (4D) 进行 flatten 操作的话，则此结论可能不成立。因为 flatten 是将 3D 的 feature map 拉伸成 1D, 那么不同的顺序可能就会产生不同的 1D 向量 (内部元素的相对位置可能发生了改变).<br>对同一个 feature map, 若其 shape 为 <code>NHWC</code> （这里的 NHWC 与上文所说的 NHWC 意义不一样，针对某个特定的 feature map, 其 NHWC 的值是固定的）, Tensorflow 的顺序是沿着 <code>C -&gt; W -&gt; H</code>，而 Caffe 的顺序是沿着 <code>W -&gt; H -&gt; C</code>。两者 flatten 的顺序在其各自的输入 feature map 索引顺序中都是 <code>3 -&gt; 2 -&gt; 1</code><br>例如，一个 <code>1x3x3x2</code> 的 feature map.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data =  [[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],   | H</span><br><span class="line">          [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],   |</span><br><span class="line">          [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]],  |</span><br><span class="line">      W  -------------</span><br><span class="line">         [[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>],</span><br><span class="line">          [<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>],</span><br><span class="line">          [<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>]]]</span><br><span class="line"></span><br><span class="line">Tensorflow: [<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">13</span>, ... ]</span><br><span class="line">Caffe: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, ...]</span><br></pre></td></tr></table></figure><blockquote><p>由于 两者 flatten 的顺序在其各自的输入 feature map 索引顺序中都是 <code>3 -&gt; 2 -&gt; 1</code>，因此若这两个 flatten 的输入是一样的话，则它们的输出也是一样的。由于 Caffe 中没有类似 Transpose 这样的层，因此我采取使用 pycaffe 将前向 inference 后 Flatten 层的输入取出，用 numpy 进行 transpose 后，再重新赋给 Flatten 层当输入，然后再次调用 pycaffe 的接口 <code>net.forward(start='', end='')</code> 指定从某个层开始前向传播，这里就指定 start 参数为 Flatten 层的 name. 这样，即可在 Caffe 中得到与 Tensorflow 中同样的 Flatten 层输出。<a href="https://github.com/BVLC/caffe/issues/2725#issue-93930312" target="_blank" rel="noopener">net.forward 指定起点</a><br>Caffe 的 Flatten 层有 <code>axis</code>, <code>end_axis</code> 两个参数，但是我无论如何设置都无法在不对输入进行 transpose 的情况下得到与 Tensorflow 一样的结果。也许是我没理解对这两个参数的意义。<a href="https://caffe.berkeleyvision.org/tutorial/layers/flatten.html" target="_blank" rel="noopener">参考1</a> <a href="https://stackoverflow.com/a/40401460/8149027" target="_blank" rel="noopener">参考2</a></p></blockquote><blockquote><p>  <strong>5-3</strong>. <strong>Padding 操作的区别</strong><br>Caffe 中的所有 padding 操作都是对称的，也就是说如果设置 <code>pad_w=1</code> 则会在 feature map 的左右两边都 pad 一个像素。但是 Tensorflow 不是如此，有可能出现左边 pad 1, 右边 pad 2，或者上边 pad 1,下边 pad 2 的情况。因此，在移植时，要保持在 Tensorflow 和 Caffe 中的 padding 方式都一样，这样才能得到相同的结果。<br>下面讨论 Caffe 的 padding 与 Tensorflow 中 <code>SAME</code> padding 方式的差异。<br>正常情况下，如果 <code>kernel_size=3, stride=1</code> 那么 <code>SAME</code> padding 模式会保持输入输出的尺寸相同，因此，需要在输入的上下左右各 pad 1 个像素。这时，在 Caffe 里只要设置 <code>pad: 1</code> 就行，这样两者 pad 的结果就是一样的了。<br>但是，如果遇到 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>d</mi><mi>e</mi><mi mathvariant="normal">≠</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">stride\neq1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 的情况，情况就变得复杂。有可能两个框架某个 Convolution 或者 Pooling 操作的输入输出尺寸都一样，但是数值却不同。如下图所示 <a href="https://github.com/Microsoft/MMdnn/wiki/Error-in-mobilenet-conversion-from-Tensorflow-to-Caffe-Different-way-of-padding#the-reason-of-the-inconsistent-shapes-is-due-to-symmetric-padding-in-caffe" target="_blank" rel="noopener">来源</a><br><img src="padding_1.png" alt=""><br><img src="padding_2.png" alt=""><br>在 Tensorflow 中, <code>SAME</code> padding 模式的策略是: <a href="https://stackoverflow.com/a/53820765/8149027" target="_blank" rel="noopener">来源</a></p><blockquote><p>First, consider the <code>SAME</code> padding scheme. A detailed explanation of the reasoning behind it is given in these notes. Here, we summarize the mechanics of this padding scheme. When using ‘SAME’, the output height and width are computed as:</p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">out_height = ceil(float(in_height) / float(strides[<span class="number">1</span>]))</span><br><span class="line">out_width  = ceil(float(in_width) / float(strides[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>The total padding applied along the height and width is computed as:</p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SAME padding 长度计算</span></span><br><span class="line"><span class="keyword">if</span> (in_height % strides[<span class="number">1</span>] == <span class="number">0</span>):</span><br><span class="line">  pad_along_height = max(filter_height - strides[<span class="number">1</span>], <span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  pad_along_height = max(filter_height - (in_height % strides[<span class="number">1</span>]), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (in_width % strides[<span class="number">2</span>] == <span class="number">0</span>):</span><br><span class="line">  pad_along_width = max(filter_width - strides[<span class="number">2</span>], <span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  pad_along_width = max(filter_width - (in_width % strides[<span class="number">2</span>]), <span class="number">0</span>)</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Finally, the padding on the top, bottom, left and right are:</p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pad_top = pad_along_height // <span class="number">2</span></span><br><span class="line">pad_bottom = pad_along_height - pad_top</span><br><span class="line">pad_left = pad_along_width // <span class="number">2</span></span><br><span class="line">pad_right = pad_along_width - pad_left</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>Note that the division by 2 means that there might be cases when the padding on both sides (top vs bottom, right vs left) are off by one. In this case, the bottom and right sides always get the one additional padded pixel. For example, when pad_along_height is 5, we pad 2 pixels at the top and 3 pixels at the bottom. Note that this is different from existing libraries such as cuDNN and Caffe, which explicitly specify the number of padded pixels and always pad the same number of pixels on both sides.</p></blockquote></blockquote><blockquote><blockquote><p>For the <code>VALID</code> scheme, the output height and width are computed as:</p></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">out_height = ceil(float(in_height - filter_height + <span class="number">1</span>) / float(strides[<span class="number">1</span>]))</span><br><span class="line">out_width  = ceil(float(in_width - filter_width + <span class="number">1</span>) / float(strides[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>and no padding is used.</p></blockquote></blockquote><blockquote><p>在我的实例中，由于最后进入 Flatten 层的 feature map 需要是 <code>13x13</code> 的，而输入图像此前一共经过了 3 次下采样，一次 MAX Pool, 两次 Convolution, 都是 <code>kernel_size=3, stride=2</code>。因此，如何使这三次操作的 padding 操作在两个框架中一致就成了关键问题。由于在 SAME padding 中，<br>                           <code>out_height = ceil(float(in_height) / float(strides[1])),</code><br>                           <code>out_width = ceil(float(in_width) / float(strides[2]))</code><br>因此，这三次下采样操作的输入尺寸存在这些可能性</p></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">              13                      &lt;-  经过第二次 Conv, stride=2</span><br><span class="line">          /         \</span><br><span class="line">         /           \</span><br><span class="line">       25            26               &lt;-  经过第一次 Conv, stride=2</span><br><span class="line">    /     \       /     \</span><br><span class="line">   49     50     51      52           &lt;-   经过 MAX Pooling</span><br><span class="line">  /  \   /  \   /   \   /   \</span><br><span class="line">97   98 99 100 101 102 103 104        &lt;-      输入图像</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>由于 Caffe 只能进行对称 padding，因此要选择一个合适的输入图像尺寸，使得在这三次操作时 Tensorflow 不会出现 padding 不对称的情况 (因为这在 Caffe 中无法实现)。<br>根据上段 <code>SAME padding 长度计算部分的公式</code>，我们要使得 <code>pad_along_width，pad_along_height</code> 的数值为 <strong>偶数</strong>，这样才能对称。因此，要使得 <strong><code>in_height % strides[1] != 0, in_width % strides[2] != 0</code></strong>。由于 <code>strides[1]=2</code>，因此，<code>in_height, in_width</code> 必须是 <strong>奇数</strong>。这样，就可以得到每次操作前的输入尺寸分别是 <code>97 -&gt; 49 -&gt; 25 -&gt; 13</code>。这样，在每次操作时，SAME padding 都会为 feature map 在空间维度上四周各 pad 一个像素。而在 Caffe 的对应层的定义里，只要设置 <code>pad: 1</code> 即可。</p></blockquote><hr><blockquote><p><strong>6</strong>. 关于 Tensorflow 中获取 Graph 中所有节点名称以及 ckpt 文件中的变量。<br>  <strong>6.1</strong>.<strong>读取 ckpt 中的变量</strong> <a href="https://www.jianshu.com/p/75d8df8511bc" target="_blank" rel="noopener">参考</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf;</span><br><span class="line"></span><br><span class="line"> reader = tf.train.NewCheckpointReader(<span class="string">"/path/to/model.ckpt"</span>)</span><br><span class="line"> variables = reader.get_variable_to_shape_map()</span><br><span class="line"> <span class="keyword">for</span> key <span class="keyword">in</span> variables:</span><br><span class="line">      w = reader.get_tensor(key)</span><br></pre></td></tr></table></figure><blockquote><p>  <strong>6.2</strong>. <strong>获取 Graph 中的所有结点名称，并计算得到某节点的值</strong> <a href="https://www.jianshu.com/p/3cee7ca5ebd8" target="_blank" rel="noopener">参考</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">all_op_names = [n.name <span class="keyword">for</span> n <span class="keyword">in</span> tf.get_default_graph().as_graph_def().node]</span><br><span class="line">conv1_op = tf.get_default_graph.get_tensor_by_name(<span class="string">'a_tensor_name_from_above_line:0'</span>)  <span class="comment"># 注意要在名称后面加 :0</span></span><br><span class="line">conv1_value = sess.run(conv1_op, feed_dict=&#123;...&#125;)</span><br></pre></td></tr></table></figure><br><h2 id="dump-ckpt-中的参数以及生成-caffemodel-的两个脚本"><a class="markdownIt-Anchor" href="#dump-ckpt-中的参数以及生成-caffemodel-的两个脚本"></a> dump ckpt 中的参数以及生成 caffemodel 的两个脚本</h2><p><a href="dump.py">dump ckpt</a><br><a href="tf2caffe.py">生成 caffemodel</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要以 cosine metric learning 工程为例，记录了如何将一个 Tensorflow 模型 (包含 ckpt 文件) 移植到 Caffe 框架下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Caffe" scheme="https://taosean.github.io/tags/Caffe/"/>
    
      <category term="Tensorflow" scheme="https://taosean.github.io/tags/Tensorflow/"/>
    
      <category term="Porting" scheme="https://taosean.github.io/tags/Porting/"/>
    
      <category term="移植" scheme="https://taosean.github.io/tags/%E7%A7%BB%E6%A4%8D/"/>
    
      <category term="padding" scheme="https://taosean.github.io/tags/padding/"/>
    
      <category term="flatten" scheme="https://taosean.github.io/tags/flatten/"/>
    
  </entry>
  
  <entry>
    <title>卡尔曼滤波</title>
    <link href="https://taosean.github.io//2019/07/04/Kalman-Filter/"/>
    <id>https://taosean.github.io//2019/07/04/Kalman-Filter/</id>
    <published>2019-07-04T05:29:47.000Z</published>
    <updated>2020-10-16T08:51:21.913Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要关注卡尔曼滤波的流程和 5 个公式。</p><a id="more"></a><p>卡尔曼滤波的主要思想：首先，根据时间步 <code>t-1</code> 的状态空间，通过状态转移矩阵和控制矩阵(控制量)，预测 <code>t</code> 时间步时的状态空间。由于 <code>t-1</code> 时间步的状态空间本身就不是准确的，含有噪声，且状态转移的过程也引入噪声，因此预测得到的 <code>t</code> 时间步的状态空间是不准确的。这时，我们在 <code>t</code> 时间步进行实际的测量，使用得到的测量结果去修正预测得到的状态空间。其实就是对预测的结果和测量的结果根据其不准确度(用协方差矩阵表示)来计算权重(即卡尔曼增益)，对两个结果进行加权平均，并依此得到 <code>t</code> 时间步最优的结果。</p><br><h1 id="卡尔曼滤波的五个公式"><a class="markdownIt-Anchor" href="#卡尔曼滤波的五个公式"></a> 卡尔曼滤波的五个公式</h1><p><img src="format.jpg" alt="卡尔曼公式"></p><br><h1 id="卡尔曼滤波模型"><a class="markdownIt-Anchor" href="#卡尔曼滤波模型"></a> 卡尔曼滤波模型</h1><p><img src="Kalman_filter_model.png" alt="卡尔曼滤波模型"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要关注卡尔曼滤波的流程和 5 个公式。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Kalman" scheme="https://taosean.github.io/tags/Kalman/"/>
    
      <category term="tracking" scheme="https://taosean.github.io/tags/tracking/"/>
    
      <category term="卡尔曼" scheme="https://taosean.github.io/tags/%E5%8D%A1%E5%B0%94%E6%9B%BC/"/>
    
      <category term="卡尔曼滤波" scheme="https://taosean.github.io/tags/%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2/"/>
    
  </entry>
  
  <entry>
    <title>【转载】 浅谈多节点 CPU+GPU 协同计算负载均衡性设计</title>
    <link href="https://taosean.github.io//2019/06/26/Heterogeneous-Computing/"/>
    <id>https://taosean.github.io//2019/06/26/Heterogeneous-Computing/</id>
    <published>2019-06-26T07:34:27.000Z</published>
    <updated>2020-12-10T12:08:35.631Z</updated>
    
    <content type="html"><![CDATA[<p>本文转载自<a href="https://blog.csdn.net/zhang0311/article/details/8224093" target="_blank" rel="noopener">这里</a>，主要讲述了关于基于 CPU+GPU 的混合异构计算系统的内容。</p><a id="more"></a><p>近年来，基于 CPU+GPU 的混合异构计算系统开始逐渐成为国内外高性能计算领域的热点研究方向。在实际应用中，许多基于 CPU+GPU 的混合异构计算机系统表现出了良好的性能。但是，由于各种历史和现实原因的制约，异构计算仍然面临着诸多方面的问题，其中最突出的问题是程序开发困难，尤其是扩展到集群规模级别时这个问题更为突出。主要表现在扩展性、负载均衡、自适应性、通信、内存等方面。</p><h1 id="一-cpugpu协同计算模式"><a class="markdownIt-Anchor" href="#一-cpugpu协同计算模式"></a> 一、 CPU+GPU协同计算模式</h1><p>CPU+GPU异构协同计算集群如图1所示，CPU+GPU 异构集群可以划分成三个并行层次：节点间并行、节点内 CPU 与 GPU 异构并行、设备（CPU 或 GPU）内并行。根据这三个层次我们可以得到 CPU+GPU 异构协同计算模式为：<font color="orange">节点间分布式+节点内异构式+设备内共享式</font>。</p><p><strong>1 节点间分布式</strong><br>CPU+GPU 异构协同计算集群中，各个节点之间的连接与传统 CPU 集群一样，采用网络连接，因此，节点间采用了分布式的计算方式，可以采用 MPI 消息通信的并行编程语言。</p><p><strong>2 节点内异构式</strong><br>CPU+GPU 异构协同计算集群中，每个节点上包含多核 CPU 和一块或多块 GPU 卡，节点内采用了异构的架构，采用主从式的编程模型，即每个 GPU 卡需要由 CPU 进程/线程调用。</p><p>由于每个节点上，CPU 核数也比较多，计算能力也很大，因此，在多数情况下，CPU 也会参与部分并行计算，根据 CPU 是否参与并行计算，我们可以把 CPU+GPU 异构协同计算划分成两种计算模式：</p><p> 1) CPU/GPU 协同计算：CPU 只负责复杂逻辑和事务处理等串行计算，GPU 进行大规模并行计算；<br> 2) CPU+GPU 共同计算：由一个 CPU 进程/线程负责复杂逻辑和事务处理等串行计算，其它 CPU 进程/线程负责小部分并行计算，GPU 负责大部分并行计算。</p><p>由于 CPU/GPU 协同计算模式比 CPU+GPU 共同计算模式简单，下面的介绍中，我们以 CPU+GPU 共同计算模式为例进行展开介绍各种编程模式。</p><p>在 CPU+GPU 共同计算模式下，我们把所有的 CPU 统称为一个设备（device），如双路 8 核 CPU 共有 16 个核，我们把这 16 个核统称成一个设备；每个 GPU 卡成为一个设备。根据这种划分方式，我们可以采用 MPI 进程或 OpenMP 线程控制节点内的各设备之间的通信和数据划分。</p><p><strong>3 设备内共享式</strong><br> 1) CPU 设备：每个节点内的所有多核 CPU 采用了共享存储模型，因此，把节点内的所有多核 CPU 看作一个设备， 可以采用 MPI 进程或 OpenMP 线程、pThread 线程控制这些 CPU 核的并行计算。</p><p> 2) GPU 设备：GPU 设备内有自己独立的 DRAM 存储，GPU 设备也是共享存储模型，在 GPU 上采用 CUDA 或 OpenCL 编程控制 GPU 众核的并行计算。CUDA 编程模式只在 NVIDIA GPU 上支持，OpenCL 编程模式在 NVIDIA GP U和 AMD GPU 都支持。</p><p>根据前面对 CPU+GPU 异构协同计算模式的描述，我们可以得到 CPU+GPU 异构协同计算的编程模型（以 MPI 和 OpenMP 为例）如表1所示。</p><p><img src="pic_1.jpg" alt="图1 CPU+GPU异构协同计算架构"></p><p><img src="pic_2.png" alt="表1 CPU+GPU异构协同计算编程模型"></p><h1 id="二-cpugpu协同计算负载均衡性设计"><a class="markdownIt-Anchor" href="#二-cpugpu协同计算负载均衡性设计"></a> 二、CPU+GPU协同计算负载均衡性设计</h1><p>下面以 模式2 为例简单介绍多节点 CPU+GPU 协同计算任务划分和负载均衡，模式2 的进程和线程与 CPU 核和 GPU 设备对应关系如 图2 所示。若采用主从式 MPI 通信机制，我们在节点 0 上多起一个进程（0号进程）作为主进程，控制其它所有进程。每个节点上启动3个计算进程，其中两个控制 GPU 设备，一个控制其余所有 CPU 核的并行，在 GPU 内采用 CUDA/OpenCL 并行，在 CPU 设备内采用 OpenMP 多线程并行。</p><p>由于 CPU+GPU 协同计算模式分为 3个层次，那么负载均衡性也需要在这 3个层次 上分别设计。在 模式2 的编程方式下，节点内和节点间均采用 MPI 进程，合二为一，设计负载均衡时，只需要做到进程间（设备之间）的负载均衡和 CPU 设备内 OpenMP 线程负载均衡、GPU 设备内 CUDA 线程负载均衡即可。</p><p>对于设备内，采用的是共享存储器模型，CPU 设备上的 OpenMP 线程可以采用 schedule(static / dynamic / guided )方式；GPU 设备上只要保证同一 warp 内的线程负载均衡即可。</p><p>对于 CPU+GPU 协同计算，由于 CPU 和 GPU 计算能力相差很大，因此，在对任务和数据划分时不能给 CPU 设备和 GPU 设备划分相同的任务/数据量，这就增加了 CPU 与 GPU 设备间负载均衡的难度。CPU 与 GPU 之间的负载均衡最好的方式是采用动态负载均衡的方法，然而有些应用无法用动态划分而只能采用静态划分的方式。下面我们分别介绍动态划分和静态划分。</p><p> 1) 动态划分：对于一些高性能计算应用程序，在 CPU 与 GPU 之间的负载均衡可以采用动态负载均衡的优化方法，例如有 N 个任务/数据，一个节点内有 2 个 GPU 卡，即三个设备（CPU 和 2个 GPU），动态负载均衡的方法是每个设备先获取一个任务/数据进行计算，计算之后立即获取下一个任务，不需要等待其他设备，直到 N 个任务/数据计算完成。这种方式只需要在集群上设定一个主进程，负责给各个计算进程分配任务/数据。</p><p> 2) 静态划分：在一些应用中，无法采用动态划分的方式，需要静态划分方法，然而静态划分方法使异构设备间的负载均衡变得困难，有时甚至无法实现。对于一些迭代应用程序，我们可以采用学习型的数据划分方法，如先让 CPU 和 GPU 分别做一次相同计算量的计算，然后通过各自的运行时间计算出 CPU 与 GPU 的计算能力比例，然后再对数据进行划分。</p><p><img src="pic_3.jpg" alt="图2 CPU+GPU协同计算示意图（以每个节点2个GPU为例）"></p><h1 id="三-cpugpu协同计算数据划分示例"><a class="markdownIt-Anchor" href="#三-cpugpu协同计算数据划分示例"></a> 三、CPU+GPU协同计算数据划分示例</h1><p>假设某一应用的数据特点如 图3 所示，从输出看，结果中的每个值的计算需要所有输入数据的信息，所有输出值的计算之间没有任何数据依赖性，可以表示成 outj=；从输入看，每个输入值对所有的输出值都产生影响，所有输入数据之间也没有任何数据依赖性。从数据特点可以看出，该应用既可以对输入进行并行数据划分也可以对输出进行数据划分。下面我们分析 CPU+GPU 协同计算时的数据划分方式。<br><img src="pic_4.jpg" alt="图3 并行数据示例"></p><p><strong>1 按输入数据划分</strong></p><p>假设按输入数据划分，我们可以采用动态的方式给每个 CPU 或 GPU 设备分配数据，做到动态负载均衡，然而这种划分方式，使所有的线程向同一个输出位置保存结果，为了正确性，需要使所有的线程对每个结果进行原子操作，这样将会严重影响性能，极端情况下，所有线程还是按顺序执行的。因此，这种方式效果很差。</p><p><strong>2 按输出数据划分</strong></p><p>按输出数据划分的话可以让每个线程做不同位置的结果计算，计算完全独立，没有依赖性。如果采用静态划分的方式，由于 CPU 和 GPU 计算能力不同，因此，很难做到负载均衡。采用动态的方式可以做到负载均衡，即把结果每次给 CPU 或 GPU 设备一块，当设备计算完本次之后，立即向主进程申请下一个分块，这样可以做到完全负载均衡。按输出数据划分，无论采用静态划分还是动态划分，都会带来另外一个问题，由于每个结果的计算都需要所有输入信息，那么所有进程（设备）都需要读取一遍所有输入数据，动态划分时还不只一次，尤其对于输入数据很大时，这将会对输入数据的IO产生很大的影响，很有可能使 IO 程序性能瓶颈。</p><p><strong>3 按输入和输出同时划分</strong></p><p>由于按输入或按输出划分都存在不同的缺点，我们可以采用输入和输出同时划分的方式进行数据划分，如 图4 所示。</p><p>从输出角度，让所有的计算进程（设备）都有一份计算结果，设备内的线程对结果进行并行计算，每个设备都有一份局部的计算结果，所有设备都计算完毕之后，利用MPI进程对所有设备的计算结果进行规约，规约最后的结果即是最终的结果。</p><p>从输入角度，按输入数据动态划分给不同的计算进程（设备），这样可以满足所有的计算进程负载均衡。<br><img src="pic_5.jpg" alt="图4 CPU+GPU协同计算数据划分示例"></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文转载自&lt;a href=&quot;https://blog.csdn.net/zhang0311/article/details/8224093&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;，主要讲述了关于基于 CPU+GPU 的混合异构计算系统的内容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CPU" scheme="https://taosean.github.io/tags/CPU/"/>
    
      <category term="GPU" scheme="https://taosean.github.io/tags/GPU/"/>
    
      <category term="负载均衡" scheme="https://taosean.github.io/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
      <category term="异构" scheme="https://taosean.github.io/tags/%E5%BC%82%E6%9E%84/"/>
    
      <category term="协同计算" scheme="https://taosean.github.io/tags/%E5%8D%8F%E5%90%8C%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>一些 C++ 相关的概念和操作</title>
    <link href="https://taosean.github.io//2019/06/26/Cxx-Related/"/>
    <id>https://taosean.github.io//2019/06/26/Cxx-Related/</id>
    <published>2019-06-26T06:27:22.000Z</published>
    <updated>2020-10-16T08:49:48.483Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了一些常用的 C++ 相关的概念和操作。</p><a id="more"></a><br><h3 id="string-与-char-互转"><a class="markdownIt-Anchor" href="#string-与-char-互转"></a> string 与 char* 互转</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string to char*</span></span><br><span class="line"><span class="built_in">string</span> name = <span class="string">"name"</span>;</span><br><span class="line"><span class="keyword">char</span> *str = (<span class="keyword">char</span>*)name.data();</span><br><span class="line"></span><br><span class="line"><span class="comment">// char* to string</span></span><br><span class="line"><span class="keyword">char</span> *name = <span class="string">"name"</span>;</span><br><span class="line"><span class="built_in">string</span> str = <span class="built_in">string</span>(name);</span><br></pre></td></tr></table></figure><br><h3 id="释放-stdvector-所占用的内存"><a class="markdownIt-Anchor" href="#释放-stdvector-所占用的内存"></a> 释放 std::vector 所占用的内存</h3><blockquote><p>在容器 vector 中，其内存占用的空间是只增不减的，比如说首先分配了 10,000 个字节，然后 erase 掉后面 9999个，则虽然有效元素只有一个，但是内存占用仍为 10,000 个。所有内存空间在 vector 析构时回收。<br>一般，我们都会通过 vector 中成员函数 clear 进行一些清除操作，但它清除的是所有的元素，使 vector 的大小减少至 0，却不能减小 vector 占用的内存。要避免 vector 持有它不再需要的内存，这就需要一种方法来使得它从曾经的容量减少至它现在需要的容量，这样减少容量的方法被称为 “<strong>收缩到合适（shrink to fit）</strong>”。</p></blockquote><p>使用以下代码可以实现此功能:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;T&gt;().swap(X)  <span class="comment">// X 的类型为 std::vector&lt;T&gt;;</span></span><br><span class="line"><span class="comment">//其相当于</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;T&gt;  temp(X);</span><br><span class="line">temp.swap(X);</span><br></pre></td></tr></table></figure><blockquote><p>其背后原理为:<strong><code>vector()</code> 使用 <code>vector</code> 的默认构造函数建立临时 <code>vector</code> 对象，再在该临时对象上调用 <code>swap</code> 成员，<code>swap</code> 调用之后对象 <code>X</code> 占用的空间就等于一个默认构造的对象的大小，临时对象就具有原来对象 <code>X</code> 的大小，而该临时对象随即就会被析构，从而其占用的空间也被释放。</strong></p></blockquote><p><a href="https://www.cnblogs.com/zhoug2020/p/4058487.html" target="_blank" rel="noopener">参考</a></p><br><h3 id="二维数组和双重指针在内存中的差别"><a class="markdownIt-Anchor" href="#二维数组和双重指针在内存中的差别"></a> 二维数组和双重指针在内存中的差别</h3><p>首先，下例是不可行的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROW 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COL 3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myputs</span><span class="params">(<span class="keyword">char</span> **pos)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> **p;</span><br><span class="line">    <span class="keyword">char</span> a[ROW][COL]=&#123;<span class="string">"abc"</span>, <span class="string">"def"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    p = a;</span><br><span class="line">    myputs(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myputs</span><span class="params">(<span class="keyword">char</span> **p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ROW; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; COL; j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c "</span>, p[i][j]); <span class="comment">// 试图用双重指针的方式访问二维数组，不可行</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>myputs(char **p)</code> 接受双重指针作为参数，<code>main()</code> 函数将二维数组的头指针赋给双重指针，并作为 <code>myputs(char **p)</code> 的参数传入，再使用 <code>p[i][j]</code> 的方式访问某个元素。这是不行的，而这与两者的内存分布有关。</p><hr><p><strong>二维数组的内存分布</strong></p><blockquote><p>定义了二维数组后，就会在内存中分配一块逻辑上连续的内存块。<code>char c[10][10]</code>，系统就会分配一块 100 字节的连续内存。也就是说这样的二维数组跟一维数组 <code>char c[100]</code> 具有相似的内存分布。<br>二维数组的内存分布如下：<br><img src="2d_array.png" alt="二维数组的内存分布"></p></blockquote><p><strong>双重指针的内存分布</strong></p><blockquote><p>双重指针的内存分配一般采取动态方式<br><img src="2d_pointer.png" alt="双重指针的内存分布"></p></blockquote><p>可以看出，当将二维数组的头指针赋值给双重指针后，再使用 <code>p[i][j]</code> 的方式访问里面的元素，就会出现错误。这是因为，二维数组的内存是以连续的方式分配的，但是在访问时，却使用了双重指针的方式进行访问，这就会导致段错误。</p><hr><p><strong>总结</strong></p><blockquote><p><code>char **p</code> 和 <code>char p[2][3]</code> 之间不能相互传递参数，因为它们具体的内存分布不一样，这样在运行时就会出现段错误。<br>此外还需注意的一点：<br>二维数组中的 <code>a[i][j]</code> 和双重指针中的 <code>a[i][j]</code> 的意思是不一样的。<br>二维数组 <code>int a[10][10]</code> 中，<code>a[i][j]</code> 指的是第 <code>i</code> 行第 <code>j</code> 列数元素。<br>双重指针中 <code>int **a</code> 中， <code>a[i][j]</code> 指的是第 <code>i</code> 个存放 <code>int *</code> 指针所指向地址中的第 <code>j</code> 个元素。也就是 <code>*(*(a+i)+j)</code>。</p></blockquote><p><a href="https://blog.csdn.net/u013684730/article/details/46565577" target="_blank" rel="noopener">原文</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了一些常用的 C++ 相关的概念和操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://taosean.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>进程和线程及相关概念</title>
    <link href="https://taosean.github.io//2019/06/14/Process-and-Thread/"/>
    <id>https://taosean.github.io//2019/06/14/Process-and-Thread/</id>
    <published>2019-06-14T02:50:31.000Z</published>
    <updated>2020-10-16T08:52:29.745Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了进程，线程等相关内容。</p><a id="more"></a><blockquote><p>抛开各种技术细节，从应用程序角度讲：<br>1、在单核计算机里，有一个资源是无法被多个程序并行使用的：CPU。<br>没有操作系统的情况下，一个程序一直独占着全部 CPU。<br>如果要有两个任务来共享同一个 CPU，程序员就需要仔细地为程序安排好运行计划–某时刻 CPU 和由程序 A 来独享，下一时刻 CPU 由程序 B 来独享,而这种安排计划后来成为 OS 的核心组件，被单独名命为 “<strong>scheduler</strong>”，即“<strong>调度器</strong>”，它关心的只是怎样把单个 CPU 的运行拆分成一段一段的“运行片”，轮流分给不同的程序去使用，而在宏观上，因为分配切换的速度极快，就制造出多程序并行在一个 CPU 上的假象。</p></blockquote><blockquote><p>2、在单核计算机里，有一个资源可以被多个程序共用，然而会引出麻烦：<strong>内存</strong>。<br>在一个只有调度器，没有内存管理组件的操作系统上，程序员需要手工为每个程序安排运行的空间 – 程序A使用物理地址 <code>0x00-0xff</code>, 程序B使用物理地址<code>0x100-0x1ff</code>，等等。<br>然而这样做有个很大的问题：每个程序都要协调商量好怎样使用同一个内存上的不同空间，软件系统和硬件系统千差万别，使这种定制的方案没有可行性。<br>为了解决这个麻烦，计算机系统引入了“<strong>虚拟地址</strong>”的概念，从三方面入手来做：<br>2.1、硬件上，CPU 增加了一个专门的模块叫 MMU，负责转换虚拟地址和物理地址。<br>2.2、操作系统上，操作系统增加了另一个核心组件：<strong>memory management</strong>，即内存管理模块，它管理物理内存、虚拟内存相关的一系列事务。<br>2.3、应用程序上，发明了一个叫做【进程】的模型，（注意）每个进程都用【<strong>完全一样的</strong>】虚拟地址空间，然而经由操作系统和硬件MMU协作，映射到不同的物理地址空间上。不同的【进程】，都有各自独立的物理内存空间，不用一些特殊手段，是无法访问别的进程的物理内存的。</p></blockquote><blockquote><p>3、现在，不同的应用程序，可以不关心底层的物理内存分配，也不关心 CPU 的协调共享了。然而还有一个问题存在：有一些程序，想要共享 CPU，【并且还要共享同样的物理内存】，这时候，一个叫【线程】的模型就出现了，它们被包裹在进程里面，在调度器的管理下共享 CPU，拥有同样的虚拟地址空间，同时也共享同一个物理地址空间，然而，它们无法越过包裹自己的进程，去访问别一个进程的物理地址空间。</p></blockquote><blockquote><p>4、进程之间怎样共享同一个物理地址空间呢？不同的系统方法各异，符合 posix 规范的操作系统都提供了一个接口，叫 mmap，可以把一个物理地址空间映射到不同的进程中，由不同的进程来共享。</p></blockquote><blockquote><p>5、PS：在有的操作系统里，进程不是调度单位（即不能被调度器使用），线程是最基本的调度单位，调度器只调度线程，不调度进程，比如 VxWorks<br><a href="http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html#comment-270980" target="_blank" rel="noopener">来源</a></p></blockquote><br>>CPU+RAM+各种资源（比如显卡，光驱，键盘，GPS, 等等外设）构成我们的电脑，但是电脑的运行，实际就是 CPU 和相关寄存器以及 RAM 之间的事情。**一个最最基础的事实**：CPU 太快，太快，太快了，寄存器仅仅能够追的上他的脚步，RAM 和别的挂在各总线上的设备完全是望其项背。那当多个任务要执行的时候怎么办呢？轮流着来?或者谁优先级高谁来？不管怎么样的策略，一句话就是在 CPU 看来就是轮流着来。**一个必须知道的事实**：执行一段程序代码，实现一个功能的过程介绍 ，当得到 CPU 的时候，相关的资源必须也已经就位，就是显卡啊，GPS 啊什么的必须就位，然后 CPU 开始执行。这里除了 CPU 以外所有的就构成了这个程序的执行环境，也就是我们所定义的程序上下文。当这个程序执行完了，或者分配给他的 CPU 执行时间用完了，那它就要被切换出去，等待下一次 CPU 的临幸。在被切换出去的最后一步工作就是保存程序上下文，因为这个是下次他被 CPU 临幸的运行环境，必须保存。**串联起来的事实**：前面讲过在 CPU 看来所有的任务都是一个一个的轮流执行的，具体的轮流方法就是：先加载程序A的上下文，然后开始执行 A，保存程序 A 的上下文，调入下一个要执行的程序 B 的程序上下文，然后开始执行 B,保存程序 B 的上下文。。。。<p>========= 重要的东西出现了========<br>进程和线程就是这样的背景出来的，<strong>两个名词不过是对应的CPU时间段的描述，名词就是这样的功能</strong>。<br>进程就是包换上下文切换的程序执行时间总和 = CPU 加载上下文 + CPU 执行 + CPU 保存上下文<br>**线程是什么呢？**进程的颗粒度太大，每次都要有上下的调入，保存，调出。如果我们把进程比喻为一个运行在电脑上的软件，那么一个软件的执行不可能是一条逻辑执行的，必定有多个分支和多个程序段，就好比要实现程序 A，实际分成 a，b，c 等多个块组合而成。那么这里具体的执行就可能变成：程序 A 得到 CPU =&gt; CPU 加载上下文，开始执行程序 A 的 a 小段，然后执行 A 的 b 小段，然后再执行 A 的 c 小段，最后 CPU 保存  A 的上下文。这里 a，b，c 的执行是共享了 A 的上下文，CPU 在执行的时候没有进行上下文切换的。这里的 a，b，c 就是线程，也就是说线程是共享了进程的上下文环境的更为细小的 CPU 时间段。到此全文结束，再一个总结：<strong>进程和线程都是一个时间段的描述，是 CPU 工作时间段的描述，不过是颗粒大小不同。</strong><br><a href="https://www.zhihu.com/question/25532384/answer/81152571" target="_blank" rel="noopener">来源</a></p><blockquote><p>一、 cpu个数、核数、线程数的关系<br>cpu个数：是指物理上，也及硬件上的核心数；<br>核数：是逻辑上的，简单理解为逻辑上模拟出的核心数；<br>线程数：是同一时刻设备能并行执行的程序个数，线程数=cpu个数 * 核数【如果有超线程，再乘以超线程数】</p></blockquote><blockquote><p>二、 cpu线程数和Java多线程<br>首先明白几个概念：<br>(1) 单个cpu线程在同一时刻只能执行单一Java程序，也就是一个线程<br>(2) 单个线程同时只能在单个cpu线程中执行<br>(3) 线程是操作系统最小的调度单位，进程是资源（比如：内存）分配的最小单位<br>(4)Java中的所有线程在JVM进程中,CPU调度的是进程中的线程<br>(5)Java多线程并不是由于cpu线程数为多个才称为多线程，当Java线程数大于cpu线程数，操作系统使用时间片机制，采用线程调度算法，频繁的进行线程切换。</p></blockquote><blockquote><p>a 那么java多进程，每个进程又多线程，cpu是如何调度的呢？<br>个人理解：操作系统并不是单纯均匀的分配cpu执行不同的进程，因为线程是调度的最小单位，所以会根据不同进程中的线程个数进行时间分片，均匀的执行每个线程，也就是说A进程中有10个线程，而B进程中有2个线程，那么cpu分给进程的执行时间理论上应该是5:1才合理。</p></blockquote><blockquote><p>b cpu线程数和java线程数有直接关系吗？<br>个人理解：没有直接关系，正如上面所说，cpu采用分片机制执行线程，给每个线程划分很小的时间颗粒去执行，但是真正的项目中，一个程序要做很多的的操作，读写磁盘、数据逻辑处理、出于业务需求必要的休眠等等操作，当程序在进行I/O操作的时候，线程是阻塞的，线程由运行状态切换到等待状态，此时cpu会做上下文切换，以便处理其他的程序；当I/O操作完成后，cpu 会收到一个来自硬盘的中断信号，并进入中断处理例程，手头正在执行的线程因此被打断，回到 ready 队列。而先前因 I/O 而waiting 的线程随着 I/O 的完成也再次回到 就绪 队列，这时 cpu 可能会选择它来执行。</p></blockquote><blockquote><p>c 如何确定程序线程数？<br>个人理解：如果所有的任务都是计算密集型的，则创建的多线程数 = 处理器核心数就可以了<br>如果io操作比较耗时，则根据具体情况调整线程数，此时 多线程数 = n*处理器核心数<br>一般情况程序线程数等于cpu线程数的两到三倍就能很好的利用cpu了，过多的程序线程数不但不会提高性能，反而还会因为线程间的频繁切换而受影响，具体需要根据线程处理的业务考略，不断调整线程数个数，确定当前系统最优的线程数。<br><a href="https://blog.csdn.net/wutongyuWxc/article/details/78732287" target="_blank" rel="noopener">原文</a></p></blockquote><br><h2 id="一篇非常好的文章"><a class="markdownIt-Anchor" href="#一篇非常好的文章"></a> 一篇非常好的文章</h2><blockquote><p><a href="https://cloud.tencent.com/developer/article/1352974" target="_blank" rel="noopener">进程与线程，单核与多核</a></p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了进程，线程等相关内容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="线程" scheme="https://taosean.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="进程" scheme="https://taosean.github.io/tags/%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="CPU" scheme="https://taosean.github.io/tags/CPU/"/>
    
      <category term="Process" scheme="https://taosean.github.io/tags/Process/"/>
    
      <category term="Thread" scheme="https://taosean.github.io/tags/Thread/"/>
    
      <category term="阻塞" scheme="https://taosean.github.io/tags/%E9%98%BB%E5%A1%9E/"/>
    
      <category term="非阻塞" scheme="https://taosean.github.io/tags/%E9%9D%9E%E9%98%BB%E5%A1%9E/"/>
    
      <category term="单核" scheme="https://taosean.github.io/tags/%E5%8D%95%E6%A0%B8/"/>
    
      <category term="多核" scheme="https://taosean.github.io/tags/%E5%A4%9A%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>轻量卷积神经网络的一些操作</title>
    <link href="https://taosean.github.io//2019/06/03/light-weight-CNN-operations/"/>
    <id>https://taosean.github.io//2019/06/03/light-weight-CNN-operations/</id>
    <published>2019-06-03T09:33:04.000Z</published>
    <updated>2020-10-16T09:16:25.735Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录一些在卷积神经网络轻量化的研究中出现的一些操作，其主要是针对卷积进行的。</p><a id="more"></a><h1 id="depthwise-convolution-and-pointwise-convolution"><a class="markdownIt-Anchor" href="#depthwise-convolution-and-pointwise-convolution"></a> Depthwise Convolution and Pointwise Convolution</h1><p><font color="orange">深度卷积</font> 分解一个标准的卷积为一个 depthwise convolution 和一个 pointwise convolution, 是对输入的每一个 channel 独立进行卷积，输入 feature map 的每个 channel 会输出 <strong>channel_multiplier</strong> (通常为 1) 个通道，最后的 feature map 就会有 in_channels * channel_multiplier 个通道了。</p><hr><p><img src="convs.jpg" alt="传统卷积和深度卷积以及逐点卷积的对比_1"></p><hr><p><img src="convs_2.jpg" alt="传统卷积和深度卷积以及逐点卷积的对比_2"></p><br><h1 id="group-convolution-and-channel-shuffle"><a class="markdownIt-Anchor" href="#group-convolution-and-channel-shuffle"></a> Group Convolution and channel shuffle</h1><p><img src="GConv.png" alt="分组卷积"></p><p><font color="orange"><strong>Group Convolution</strong></font> 顾名思义，是对输入 feature map 进行分组，然后每组分别卷积。假设输入 feature map 的尺寸为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi mathvariant="normal">∗</mi><mi>H</mi><mi mathvariant="normal">∗</mi><mi>W</mi></mrow><annotation encoding="application/x-tex">C∗H∗W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord">∗</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord">∗</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span></span></span></span>，输出 feature map 的数量为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span>，如果设定要分成 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span></span></span></span> 个 groups，则每组的输入 feature map 数量为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>C</mi><mi>G</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{C}{G}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，每组的输出 feature map 数量为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>N</mi><mi>G</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{N}{G}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，每个卷积核的尺寸为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>C</mi><mi>G</mi></mfrac><mo>×</mo><mi>K</mi><mo>×</mo><mi>K</mi></mrow><annotation encoding="application/x-tex">\frac{C}{G}\times K\times K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span>，卷积核的总数仍为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span> 个，每组的卷积核数量为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>N</mi><mi>G</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{N}{G}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，卷积核只与其同组的输入 map 进行卷积，卷积核的总参数量为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mo>×</mo><mfrac><mi>C</mi><mi>G</mi></mfrac><mo>×</mo><mi>K</mi><mo>×</mo><mi>K</mi></mrow><annotation encoding="application/x-tex">N\times \frac{C}{G}\times K\times K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span></span></span></span>，可见，总参数量减少为原来的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mi>G</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{G}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">G</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，其连接方式如上图右所示，group 1 的输出 map 数为 2，有 2 个卷积核，每个卷积核的 channel 数为 4，与 group1 的输入 map 的 channel 数相同，卷积核只与同组的输入 map 卷积，而不与其他组的输入 map 卷积。</p><p><font color="orange"><strong>Channel shuffle</strong></font>: 因为在<strong>同一组中不同的通道蕴含的信息可能是相同的</strong>，如果不进行通道交换的话，<strong>学出来的特征会非常局限</strong>。如果在不同的组之后交换一些通道，那么就能<strong>交换信息，使得各个组的信息更丰富</strong>，能提取到的特征自然就更多，这样是有利于得到更好的结果。</p><hr><p><img src="channel_shuffle.jpg" alt="Channel Shuffle"></p><p>ShuffleNet主要拥有两个创新点：</p><blockquote><ol><li>pointwise group convolution <font color="orange"><strong>逐点组卷积，就是带分组的卷积核为1×1的卷积，也就是说逐点组卷积是卷积核为 1×1 的分组卷积</strong></font>。</li><li>channel shuffle</li></ol></blockquote><p>原因：</p><blockquote><ol><li>逐点卷积占了很大的计算量 ———&gt; 逐点分组卷积</li><li>不同组之间特征通信问题   ———&gt; channel shuffle</li></ol></blockquote><hr><p><font color="orange"><strong>GDC :</strong></font> 更进一步，如果分组数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>G</mi><mo>=</mo><mi>N</mi><mo>=</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">G=N=C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span>，同时卷积核的尺寸与输入 map 的尺寸相同，即 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mo>=</mo><mi>H</mi><mo>=</mo><mi>W</mi></mrow><annotation encoding="application/x-tex">K=H=W</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span></span></span></span>，则输出 map 为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi mathvariant="normal">∗</mi><mn>1</mn><mi mathvariant="normal">∗</mi><mn>1</mn></mrow><annotation encoding="application/x-tex">C∗1∗1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord">∗</span><span class="mord">1</span><span class="mord">∗</span><span class="mord">1</span></span></span></span> 即长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 的向量，此时称之为 <strong>Global Depthwise Convolution（GDC）</strong>，见 MobileFaceNet，可以看成是全局加权池化，与 Global Average Pooling（GAP） 的不同之处在于，GDC 给每个位置赋予了可学习的权重（对于已对齐的图像这很有效，比如人脸，中心位置和边界位置的权重自然应该不同），而 GAP 每个位置的权重相同，全局取个平均，如下图所示：</p><hr><p><img src="GDC.png" alt="Global Depthwise Convolution"></p><br><h1 id="squeeze-and-excitation-module"><a class="markdownIt-Anchor" href="#squeeze-and-excitation-module"></a> Squeeze-and-Excitation module</h1><p><font color="orange"><strong>SE module</strong></font> 通过学习的方式来自动获取到每个特征通道的重要程度，然后依照计算出来的重要程度去提升有用的特征并抑制对当前任务用处不大的特征。<br><img src="SE.jpg" alt="SE module"></p><hr><blockquote><ol><li>首先做普通的卷积，得到了一个 output feature map，它的 shape 为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>C</mi><mi mathvariant="normal">，</mi><mi>H</mi><mi mathvariant="normal">，</mi><mi>W</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[C，H，W]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="mclose">]</span></span></span></span>，根据论文观点，这个 feature map 的特征很混乱。为了获得重要性的评价指标，直接对这个 feature map 做一个 Global Average Pooling，然后我们就得到了长度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding="application/x-tex">C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 的向量。（这里还涉及到一个额外的东西，如果你了解卷积，你就会发现一旦某一特征经常被激活，那么 Global Average Pooling 计算出来的值会比较大，说明它对结果的影响也比较大，反之越小的值，对结果的影响就越小）</li><li>然后我们对这个向量加两个 FC 层，做非线性映射，这两个 FC 层的参数，也就是网络需要额外学习的参数。</li><li>最后输出的向量，我们可以看做特征的重要性程度，然后与 feature map 对应 channel 相乘就得到特征有序的 feature map 了。</li></ol></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录一些在卷积神经网络轻量化的研究中出现的一些操作，其主要是针对卷积进行的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CNN" scheme="https://taosean.github.io/tags/CNN/"/>
    
      <category term="Convolution" scheme="https://taosean.github.io/tags/Convolution/"/>
    
      <category term="FLOPs" scheme="https://taosean.github.io/tags/FLOPs/"/>
    
      <category term="mobile" scheme="https://taosean.github.io/tags/mobile/"/>
    
      <category term="shuffle" scheme="https://taosean.github.io/tags/shuffle/"/>
    
      <category term="SE" scheme="https://taosean.github.io/tags/SE/"/>
    
  </entry>
  
  <entry>
    <title>Git的使用流程</title>
    <link href="https://taosean.github.io//2019/05/31/Git-Usage/"/>
    <id>https://taosean.github.io//2019/05/31/Git-Usage/</id>
    <published>2019-05-31T09:32:00.000Z</published>
    <updated>2020-10-16T08:50:55.996Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录一些使用 Git 进行版本管理的流程和命令。</p><a id="more"></a><h1 id="概念建立"><a class="markdownIt-Anchor" href="#概念建立"></a> 概念建立</h1><p>1 工作区: 代码所在的文件路径<br>2 暂存区: 使用 <code>git add &lt;filename&gt;</code>，将文件 <filename> 添加进 暂存区，待后续操作。<br>3 本地仓库: 使用  <code>git commit -m &quot;comments here&quot;</code> 将 暂存区的所有文件 commit 到本地仓库，本地仓库位于本机。<br>4 远程仓库: 在服务器端运行，可将本地仓库内容通过 <code>git push</code> 推送到远程仓库。</filename></p><br><h1 id="本地仓库和远程仓库的创建"><a class="markdownIt-Anchor" href="#本地仓库和远程仓库的创建"></a> 本地仓库和远程仓库的创建</h1><h2 id="1-添加远程库"><a class="markdownIt-Anchor" href="#1-添加远程库"></a> 1. 添加远程库</h2><p>为了方便管理，创建 git 用户.<br>在远程服务器上安装好 git 后，使用以下命令创建远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir example.git</span><br><span class="line"><span class="built_in">cd</span> example.git</span><br><span class="line">git --bare init</span><br></pre></td></tr></table></figure><p>用 <code>chown -R git:git example.git</code> 将 <code>example.git</code> 的所有者和群组改为 git.</p><h2 id="2-添加本地仓库"><a class="markdownIt-Anchor" href="#2-添加本地仓库"></a> 2. 添加本地仓库</h2><p>若已经拥有了远程仓库，可以通过 <code>git clone &lt;example.git&gt;</code> 的命令将远程仓库 clone 到本地。<br>若是对已存在的工程添加 git 管理，则在工程目录下，使用 <code>git init</code> 命令将其变成 git 管理的仓库。</p><br><h1 id="常用的-git-流程"><a class="markdownIt-Anchor" href="#常用的-git-流程"></a> 常用的 git 流程</h1><p>创建好本地仓库和远程仓库后，就可以使用 git 进行版本控制了。<br>若是对已存在的工程进行操作，则流程如下:</p><blockquote><p>1  使用 git add <filename> 的方式将文件添加到暂存区。若某工程第一次使用 git，用 <code>git add .</code> 将工程目录下的所有文件添加到暂存区。此操作可以在 <code>Git bash</code> 中通过命令行操作，或者在 <code>Git GUI</code> 通过图形界面操作。</filename></p></blockquote><blockquote><hr><p>2  若已在暂存区中添加了一些文件，可以通过 <code>git commit -m &quot;comments here&quot;</code> 将暂存区中所有文件 commit 到本地仓库的当前分支。</p></blockquote><blockquote><hr><p>3  若要将本地的当前分支，如 master 分支推送到远程仓库的 master 分支，则使用 <code>git push</code> 命令。</p><blockquote><p>注意: 应先将本地仓库与远程仓库关联，在本地 <code>example</code> 工程下，使用语句 <code>git remote add origin git@10.167.93.74:/path/to/example.git</code>. 这样，就将 <code>10.167.93.74:/path/to/example.git</code> 与本地 <code>example</code> 仓库关联上了。添加后，远程库的名字就是 <code>origin</code>，这是 Git 默认的叫法，也可以改成别的，但是 <code>origin</code> 这个名字一看就知道是远程库。</p></blockquote></blockquote><blockquote><blockquote><hr><p>关联后，使用命令 <code>git push -u origin master</code> 第一次推送 <code>master</code> 分支的所有内容；</p></blockquote></blockquote><blockquote><blockquote><hr><p>此后，每次本地提交后，只要有必要，就可以使用命令 <code>git push origin master</code> 推送最新修改；</p></blockquote></blockquote><blockquote><p>注意: 若不想将工程路径下的所有文件添加版本管理，则可以只将部分文件进行 add, 对从未进行过 add 操作的文件，将被视作 <code>untracked</code>.</p></blockquote><blockquote><hr><p>4  若对已经被 Git 管理的多个文件在某次 commit 后进行了修改，想将这些文件一次性进行 add，可以使用命令 <code>git add -u</code>. 这样，就不会将那些 <code>untracked</code> 的文件添加进暂存区 (git 术语为进行 stage). 若使用 <code>git add .</code> 命令，将会提交 <strong>新文件</strong> (new) 和 <strong>被修改</strong> (modified) 文件，这时，那些 <code>untracked</code> 的文件会被看作 <code>新文件</code>。</p><blockquote><p><code>Git add</code> 命令的 3 种用法:</p></blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .  : 监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区，包括文件内容修改 (modified) 以及新文件 (new)，但不包括被删除的文件。</span><br><span class="line">git add -u : 仅监控已经被 add 的文件（即 tracked file），他会将被修改的文件提交到暂存区。add -u 不会提交新文件（untracked file）。（git add --update 的缩写）</span><br><span class="line">git add -A : 上面两个功能的合集（git add --all 的缩写）</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>示例</p></blockquote></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line"><span class="built_in">echo</span> Change me &gt; change-me</span><br><span class="line"><span class="built_in">echo</span> Delete me &gt; delete-me</span><br><span class="line">git add change-me delete-me</span><br><span class="line">git commit -m initial</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> OK &gt;&gt; change-me</span><br><span class="line">rm delete-me</span><br><span class="line"><span class="built_in">echo</span> Add me &gt; add-me</span><br><span class="line"></span><br><span class="line">git status</span><br><span class="line"><span class="comment"># Changed but not updated:</span></span><br><span class="line"><span class="comment">#   modified:   change-me</span></span><br><span class="line"><span class="comment">#   deleted:    delete-me</span></span><br><span class="line"><span class="comment"># Untracked files:</span></span><br><span class="line"><span class="comment">#   add-me</span></span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># Changes to be committed:</span></span><br><span class="line"><span class="comment">#   new file:   add-me</span></span><br><span class="line"><span class="comment">#   modified:   change-me</span></span><br><span class="line"><span class="comment"># Changed but not updated:</span></span><br><span class="line"><span class="comment">#   deleted:    delete-me</span></span><br><span class="line"></span><br><span class="line">git reset</span><br><span class="line"></span><br><span class="line">git add -u</span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># Changes to be committed:</span></span><br><span class="line"><span class="comment">#   modified:   change-me</span></span><br><span class="line"><span class="comment">#   deleted:    delete-me</span></span><br><span class="line"><span class="comment"># Untracked files:</span></span><br><span class="line"><span class="comment">#   add-me</span></span><br><span class="line"></span><br><span class="line">git reset</span><br><span class="line"></span><br><span class="line">git add -A</span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># Changes to be committed:</span></span><br><span class="line"><span class="comment">#   new file:   add-me</span></span><br><span class="line"><span class="comment">#   modified:   change-me</span></span><br><span class="line"><span class="comment">#   deleted:    delete-me</span></span><br></pre></td></tr></table></figure><blockquote><blockquote><p><a href="https://www.cnblogs.com/skura23/p/5859243.html" target="_blank" rel="noopener">参考</a></p></blockquote></blockquote><br><h1 id="常用-git-命令"><a class="markdownIt-Anchor" href="#常用-git-命令"></a> 常用 Git 命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git add</span><br><span class="line">git commit</span><br><span class="line">git status</span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line">git push &lt;remote&gt; &lt;<span class="built_in">local</span> branch name&gt;:&lt;remote branch to push into&gt;</span><br><span class="line">git <span class="built_in">log</span> --graph <span class="comment">#查看树状图</span></span><br></pre></td></tr></table></figure><br><h1 id="常用-git-工具"><a class="markdownIt-Anchor" href="#常用-git-工具"></a> 常用 Git 工具</h1><p>· Git Bash<br>· Git GUI<br>· Pycharm 上的 Git</p><br><h1 id="教程"><a class="markdownIt-Anchor" href="#教程"></a> 教程</h1><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">Git教程-廖雪峰</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录一些使用 Git 进行版本管理的流程和命令。&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://taosean.github.io/tags/git/"/>
    
      <category term="github" scheme="https://taosean.github.io/tags/github/"/>
    
      <category term="version control" scheme="https://taosean.github.io/tags/version-control/"/>
    
  </entry>
  
  <entry>
    <title>AlexeyAB/Darknet 的使用经验总结</title>
    <link href="https://taosean.github.io//2019/05/31/AlexyAB-Darknet/"/>
    <id>https://taosean.github.io//2019/05/31/AlexyAB-Darknet/</id>
    <published>2019-05-31T06:11:29.000Z</published>
    <updated>2020-10-16T08:17:35.734Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了 GitHub 上的热门 Repo <a href="https://github.com/AlexeyAB/darknet" target="_blank" rel="noopener">AlexeyAB/Darknet</a> 的一些使用要点。</p><a id="more"></a><h1 id="与-opencv-的速度比较"><a class="markdownIt-Anchor" href="#与-opencv-的速度比较"></a> 与 OpenCV 的速度比较</h1><blockquote><p> 使用 GPU 时此 Repo 速度比 OpenCV 快<br> 使用 CPU 时此 Repo 速度比 OpenCV 慢<br><a href="https://github.com/AlexeyAB/darknet/issues/3273#issuecomment-497096110" target="_blank" rel="noopener">来源</a></p></blockquote><br><h1 id="finetune-相关"><a class="markdownIt-Anchor" href="#finetune-相关"></a> Finetune 相关</h1><p>记在 base 数据集上训练得到的模型为 yolov3-old.weights, 当有新增数据集时，</p><blockquote><p> 若新增数据集和 base 数据<br>集类别一致，则在 yolov3-old.weights 的基础上，用 base+新增数据 进行训练。</p></blockquote><hr><blockquote><p> 若新增数据集包含其他类别，则先用 <code>darknet.exe partial cfg/yolov3.cfg yolov3.weights yolov3.conv.81 81</code> 得到 <code>yolov3.conv.81</code> 模型，再在此模型上用新数据集进行训练。<a href="https://github.com/AlexeyAB/darknet/issues/3264#issuecomment-496725772" target="_blank" rel="noopener">来源</a> <a href="https://github.com/AlexeyAB/darknet/blob/55dcd1bcb8d83f27c9118a9a4684ad73190e2ca3/build/darknet/x64/partial.cmd#L27" target="_blank" rel="noopener">partial命令</a></p></blockquote><br><h1 id="处理逻辑"><a class="markdownIt-Anchor" href="#处理逻辑"></a> 处理逻辑</h1><p>以使用单个 GPU 进行处理为例:</p><h2 id="训练"><a class="markdownIt-Anchor" href="#训练"></a> 训练</h2><p>假设 cfg 文件中定义的 <code>batch=64</code>, <code>subdivisions=16</code></p><hr><blockquote><p>&lt;1&gt; 解析各种配置文件，如 <code>coco.data</code>, <code>coco.names</code> 等，获取各种参数。<br>&lt;2&gt; 解析 <code>cfg</code> 文件并将其实例化为 <code>network net</code> 对象. (注意，此过程中 net.batch 参数不是 cfg 文件中的 batch 值，而是 cfg 文件中 batch/subdivisions 得到的值。<code>net.batch</code> 的值为真正进行前向传播时的 batch size)<br>&lt;3&gt; 加载预训练模型 - <code>weights</code> 文件到 <code>net</code> 对象中。<br>&lt;4&gt; 获取所有训练图像的路径。<br>&lt;5&gt; 创建一个线程用来从磁盘中 load 数据，每次从磁盘中 load cfg 文件中的 batch 张图像到内存。<br>&lt;6&gt; 迭代训练。<br>  &lt;6.1&gt; 将一次从磁盘中读取的 batch (cfg 文件中) 张图像分成 <code>subdivisions</code> 份，即每份为 <code>net.batch</code>。使用 <code>net.batch</code> 张图像进行一次迭代，同时返回一个 <code>batch</code> 的 <code>loss</code>，最后，对 <code>subdivisions</code> 个 batch 的 loss 进行加和平均，得到一次从磁盘读取的所有图像 (cfg 中 batch 张) 的平均 loss.<br>  &lt;6.2&gt; 不断重复步骤 6.1，在某些迭代次数时生成模型以及计算 mAP.</p></blockquote><hr><h2 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h2><p>由于 AlexeyAB 没有提供 批量测试 函数 (Batch Inference), 因此我自己实现了此功能。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// network.c 中添加以下函数</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> **<span class="title">network_predict_image_batch_gpu</span><span class="params">(<span class="keyword">float</span> *imgBatch, network* net, <span class="keyword">float</span> thresh, <span class="keyword">float</span> hier_thresh, <span class="keyword">float</span> nms, metadata meta, <span class="keyword">int</span>* box_nums)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> w = network_width(net);</span><br><span class="line"><span class="keyword">int</span> h = network_height(net);</span><br><span class="line"><span class="keyword">int</span> batch = net-&gt;batch;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// predict batch images</span></span><br><span class="line">network_predict(*net, imgBatch);</span><br><span class="line"><span class="built_in">free</span>(imgBatch);</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> **results = (<span class="keyword">float</span>**)<span class="built_in">calloc</span>(batch, <span class="keyword">sizeof</span>(<span class="keyword">float</span>*));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; batch; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> nboxes = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> letterbox = <span class="number">0</span>;</span><br><span class="line">detection * dets = get_network_boxes(net, w, h, thresh, hier_thresh, <span class="number">0</span>, <span class="number">1</span>, &amp;nboxes, letterbox);</span><br><span class="line">do_nms_sort(dets, nboxes, meta.classes, nms);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> real_box_num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nboxes; j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; meta.classes; s++) &#123;</span><br><span class="line"><span class="keyword">if</span> (dets[j].prob[s] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">real_box_num += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(box_nums + i, &amp;real_box_num, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">float</span> *res = (<span class="keyword">float</span>*)<span class="built_in">calloc</span>(real_box_num * <span class="number">6</span>, <span class="keyword">sizeof</span>(<span class="keyword">float</span>)); <span class="comment">// 6 is &#123;x, y, w, h, prob, class&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nboxes; j++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s &lt; meta.classes; s++) &#123;</span><br><span class="line"><span class="keyword">float</span> now_prob = dets[j].prob[s];</span><br><span class="line"><span class="keyword">if</span> (now_prob &gt; <span class="number">0</span>) &#123;</span><br><span class="line">box b = dets[j].bbox;</span><br><span class="line"><span class="keyword">char</span> * nameTag = meta.names[s];</span><br><span class="line"><span class="keyword">float</span> x_ctr = b.x;</span><br><span class="line"><span class="keyword">float</span> y_ctr = b.y;</span><br><span class="line"><span class="keyword">float</span> width = b.w;</span><br><span class="line"><span class="keyword">float</span> height = b.h;</span><br><span class="line"><span class="keyword">float</span> cls_idx = (<span class="keyword">float</span>)s;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(res, &amp;x_ctr, <span class="number">1</span> * <span class="keyword">sizeof</span>(<span class="keyword">float</span>));</span><br><span class="line">res += <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(res, &amp;y_ctr, <span class="number">1</span> * <span class="keyword">sizeof</span>(<span class="keyword">float</span>));</span><br><span class="line">res += <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(res, &amp;width, <span class="number">1</span> * <span class="keyword">sizeof</span>(<span class="keyword">float</span>));</span><br><span class="line">res += <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(res, &amp;height, <span class="number">1</span> * <span class="keyword">sizeof</span>(<span class="keyword">float</span>));</span><br><span class="line">res += <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(res, &amp;now_prob, <span class="number">1</span> * <span class="keyword">sizeof</span>(<span class="keyword">float</span>));</span><br><span class="line">res += <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(res, &amp;cls_idx, <span class="number">1</span> * <span class="keyword">sizeof</span>(<span class="keyword">float</span>));</span><br><span class="line">res += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res -= real_box_num * <span class="number">6</span>;</span><br><span class="line">results[i] = res;</span><br><span class="line"></span><br><span class="line">free_detections(dets, nboxes);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; net-&gt;n; k++) &#123;</span><br><span class="line">layer temp_layer = net-&gt;layers[k];</span><br><span class="line"><span class="keyword">if</span> (temp_layer.type == YOLO || temp_layer.type == REGION || temp_layer.type == DETECTION) &#123;</span><br><span class="line">net-&gt;layers[k].output = net-&gt;layers[k].output + net-&gt;layers[k].outputs;</span><br><span class="line"><span class="comment">//temp_layer.output = temp_layer.output + temp_layer.outputs; 原来的版本</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果要将 darknet 编译成 dll 供其他程序使用，则在 darknet.h 里 network_predict_image 附近 加上</span></span><br><span class="line">LIB_API float **network_predict_image_batch_gpu(float *imgBatch, network* net, float thresh, float hier_thresh, float nms, metadata meta, int* box_nums)；</span><br></pre></td></tr></table></figure><p>调用此函数的示例代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span>* configPath = <span class="string">"C:/Users/taoxuan.G08/Documents/Visual Studio 2015/Projects/mlit_yolo/mlit_yolo/cfg/yolov3-mlit-SD.cfg"</span>;</span><br><span class="line"><span class="keyword">char</span>* weightPath = <span class="string">"C:/Users/taoxuan.G08/Documents/Visual Studio 2015/Projects/mlit_yolo/mlit_yolo/backup/yolov3-mlit-SD_50000.weights"</span>;</span><br><span class="line"><span class="keyword">char</span>* metaPath = <span class="string">"C:/Users/taoxuan.G08/Documents/Visual Studio 2015/Projects/mlit_yolo/mlit_yolo/cfg/mlit.data"</span>;</span><br><span class="line"><span class="built_in">string</span> result_dir = <span class="string">"C:/Users/taoxuan.G08/Documents/Visual Studio 2015/Projects/mlit_yolo/mlit_yolo/result/"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* img_path_1 = <span class="string">"C:/Users/taoxuan.G08/Documents/Visual Studio 2015/Projects/mlit_yolo/mlit_yolo/test_images/test_1.jpg"</span>;</span><br><span class="line"><span class="keyword">char</span>* img_path_2 = <span class="string">"C:/Users/taoxuan.G08/Documents/Visual Studio 2015/Projects/mlit_yolo/mlit_yolo/test_images/test_2.jpg"</span>;</span><br><span class="line"><span class="keyword">char</span>* img_path_3 = <span class="string">"C:/Users/taoxuan.G08/Documents/Visual Studio 2015/Projects/mlit_yolo/mlit_yolo/test_images/test_3.jpg"</span>;</span><br><span class="line"><span class="keyword">char</span>* img_path_4 = <span class="string">"C:/Users/taoxuan.G08/Documents/Visual Studio 2015/Projects/mlit_yolo/mlit_yolo/test_images/test_4.jpg"</span>;</span><br><span class="line"><span class="keyword">char</span>* img_path_5 = <span class="string">"C:/Users/taoxuan.G08/Documents/Visual Studio 2015/Projects/mlit_yolo/mlit_yolo/test_images/test_5.jpg"</span>;</span><br><span class="line"><span class="keyword">char</span>* img_path_6 = <span class="string">"C:/Users/taoxuan.G08/Documents/Visual Studio 2015/Projects/mlit_yolo/mlit_yolo/test_images/test_6.jpg"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> batchSize = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> **img_paths = (<span class="keyword">char</span>**)<span class="built_in">calloc</span>(batchSize, <span class="keyword">sizeof</span>(<span class="keyword">char</span>*));</span><br><span class="line">img_paths[<span class="number">0</span>] = img_path_1;</span><br><span class="line">img_paths[<span class="number">1</span>] = img_path_2;</span><br><span class="line">img_paths[<span class="number">2</span>] = img_path_3;</span><br><span class="line">img_paths[<span class="number">3</span>] = img_path_4;</span><br><span class="line">img_paths[<span class="number">4</span>] = img_path_5;</span><br><span class="line">img_paths[<span class="number">5</span>] = img_path_6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> conf_thresh = <span class="number">0.6</span>;</span><br><span class="line"><span class="keyword">float</span> hier_thresh = <span class="number">0.5</span>;</span><br><span class="line"><span class="keyword">float</span> nms = <span class="number">0.45</span>;</span><br><span class="line"></span><br><span class="line">cuda_set_device(<span class="number">0</span>);</span><br><span class="line">network* netMain = load_network_custom(configPath, weightPath, <span class="number">0</span>, batchSize);</span><br><span class="line">metadata metaMain = get_metadata(metaPath);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> input_w = network_width(netMain);</span><br><span class="line"><span class="keyword">int</span> input_h = network_height(netMain);</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">3</span>;</span><br><span class="line"><span class="comment">//int num_calsses = metaMain.classes;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里得到的 batch 就是上面手动设置的 batchSize</span></span><br><span class="line"><span class="keyword">int</span> batch = netMain-&gt;batch;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 char** 中读取图像数据，并合并成 float *</span></span><br><span class="line"><span class="keyword">float</span> *imgBatch = (<span class="keyword">float</span>*)<span class="built_in">calloc</span>(batch * input_w * input_h * c, <span class="keyword">sizeof</span>(<span class="keyword">float</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//No OpenCV</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; batch; i++) &#123;</span><br><span class="line">image dark_image = load_image_color(img_paths[i], <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">image resized = resize_image(dark_image, input_w, input_h);</span><br><span class="line"><span class="built_in">memcpy</span>(imgBatch + i*input_w*input_h*c, resized.data, input_w*input_h*c * <span class="keyword">sizeof</span>(<span class="keyword">float</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *box_num_batch = (<span class="keyword">int</span>*)<span class="built_in">calloc</span>(batch, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">float</span> **results = network_predict_image_batch_gpu(imgBatch, netMain, conf_thresh, hier_thresh, nms, metaMain, box_num_batch);</span><br><span class="line"><span class="keyword">float</span> *res;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析 results</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; batch; i++) &#123;</span><br><span class="line">cv::Mat image2show = cv::imread(img_paths[i]);</span><br><span class="line"><span class="keyword">int</span> ori_w = image2show.cols;</span><br><span class="line"><span class="keyword">int</span> ori_h = image2show.rows;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nbox = *(box_num_batch + i);</span><br><span class="line">res = results[i];</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span> &lt;&lt; nbox &lt;&lt; <span class="string">" boxes detected"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nbox; j++) &#123;</span><br><span class="line"><span class="keyword">float</span> x_ctr = res[<span class="number">0</span> + <span class="number">6</span> * j];</span><br><span class="line"><span class="keyword">float</span> y_ctr = res[<span class="number">1</span> + <span class="number">6</span> * j];</span><br><span class="line"><span class="keyword">float</span> width = res[<span class="number">2</span> + <span class="number">6</span> * j];</span><br><span class="line"><span class="keyword">float</span> height = res[<span class="number">3</span> + <span class="number">6</span> * j];</span><br><span class="line"><span class="keyword">float</span> prob = res[<span class="number">4</span> + <span class="number">6</span> * j];</span><br><span class="line"><span class="keyword">float</span> cls_idx = res[<span class="number">5</span> + <span class="number">6</span> * j];</span><br><span class="line"><span class="keyword">char</span> * nameTag = metaMain.names[(<span class="keyword">int</span>)(cls_idx)];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> w_on_ori = (<span class="keyword">int</span>)(width * ori_w);</span><br><span class="line"><span class="keyword">int</span> h_on_ori = (<span class="keyword">int</span>)(height * ori_h);</span><br><span class="line"><span class="keyword">int</span> lft = (<span class="keyword">int</span>)(x_ctr * ori_w - w_on_ori / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">int</span> rgt = (<span class="keyword">int</span>)(x_ctr * ori_w + w_on_ori / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">int</span> top = (<span class="keyword">int</span>)(y_ctr * ori_h - h_on_ori / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">int</span> bot = (<span class="keyword">int</span>)(y_ctr * ori_h + h_on_ori / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">cv::<span class="function">Point <span class="title">pt1</span><span class="params">(lft, top)</span></span>;</span><br><span class="line">cv::<span class="function">Point <span class="title">pt2</span><span class="params">(rgt, bot)</span></span>;</span><br><span class="line">cv::rectangle(image2show, pt1, pt2, Scalar(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">1</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> text = <span class="built_in">std</span>::<span class="built_in">string</span>(nameTag) + <span class="string">" ["</span> + to_string(<span class="keyword">int</span>(round(prob * <span class="number">100</span>))) + <span class="string">"]"</span>;</span><br><span class="line">cv::putText(image2show, text, Point(pt1.x, pt1.y - <span class="number">5</span>), cv::FONT_HERSHEY_COMPLEX, <span class="number">0.5</span>, Scalar(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"&gt;&gt;&gt; %d %d %d %d %f &lt;&lt;&lt; "</span>, (<span class="keyword">int</span>)(x_ctr * ori_w), (<span class="keyword">int</span>)(y_ctr * ori_h), (<span class="keyword">int</span>)(width * ori_w), (<span class="keyword">int</span>)(height * ori_h), prob);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; nameTag &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cv::imshow(<span class="string">"detected"</span>, image2show);</span><br><span class="line">cv::waitKey(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//free(res);</span></span><br><span class="line"><span class="comment">//free_detections(res, nbox);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(box_num_batch);</span><br><span class="line"><span class="built_in">free</span>(results);</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="主存与显存"><a class="markdownIt-Anchor" href="#主存与显存"></a> 主存与显存</h1><p>在此 repo 的实现中，数据是先从磁盘读取到主存中，然后在使用 GPU 进行训练前，将主存中的数据拷贝至显存对象中，然后使用 GPU 进行运算。<br>参考 <code>network_kernels.cu</code> 中的 <code>float *network_predict_gpu(network net, float *input)</code> 函数。</p><p>在 Traffic counter 项目中，将来可能使用 GPU 版本的解码器，此解码器解码后的图像数据是在显存中的。因此，设想在将来的处理中，将略过从主存往显存拷贝数据这一步骤，直接传递显存中的对象，并进行处理。具体实现时，可重点参考 <code>float *network_predict_gpu(network net, float *input)</code> 函数。</p><h2 id="confidence-threshold"><a class="markdownIt-Anchor" href="#confidence-threshold"></a> Confidence threshold</h2><h2 id="nms-threshold"><a class="markdownIt-Anchor" href="#nms-threshold"></a> NMS threshold</h2><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了 GitHub 上的热门 Repo &lt;a href=&quot;https://github.com/AlexeyAB/darknet&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AlexeyAB/Darknet&lt;/a&gt; 的一些使用要点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="gpu" scheme="https://taosean.github.io/tags/gpu/"/>
    
      <category term="yolo" scheme="https://taosean.github.io/tags/yolo/"/>
    
      <category term="yolov3" scheme="https://taosean.github.io/tags/yolov3/"/>
    
      <category term="darknet" scheme="https://taosean.github.io/tags/darknet/"/>
    
      <category term="cpu" scheme="https://taosean.github.io/tags/cpu/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV 4.0.1 + CUDA 8.0 + Visual Studio 2015 + Win10</title>
    <link href="https://taosean.github.io//2019/05/20/Build-opencv-with-GPU/"/>
    <id>https://taosean.github.io//2019/05/20/Build-opencv-with-GPU/</id>
    <published>2019-05-20T06:19:41.000Z</published>
    <updated>2020-10-16T08:49:14.112Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了使用 CUDA 8.0，Visual Studio 2015，Win10 来编译 OpenCV 4.0.1 的步骤。</p><a id="more"></a><h1 id="安装流程"><a class="markdownIt-Anchor" href="#安装流程"></a> 安装流程</h1><blockquote><p>[1].   安装好 CUDA 8.0. 各种路径添加到环境变量。</p></blockquote><hr><blockquote><p>[2]. 下载 Opencv 源码到 <code>&lt;OpenCV_DIR&gt;</code> 及 对应版本的 opencv_contrib 到 <code>&lt;OpenCV_CONTRIB_DIR&gt;</code>.</p></blockquote><hr><blockquote><p>[3]. Cmake 生成 VS solution。<br>  3.1 打开 cmake. 在 <code>where is the source code</code> 中填入 <code>&lt;OpenCV_DIR&gt;</code>, 在 <code>Where to build the binaries</code> 中 填入 <code>&lt;OpenCV_DIR/build&gt;</code>。<br>  3.2 点击 configure, 选择 <code>Visual Studio 14 2015 Win64</code>. (一定要选带有 Win 64 字样的，否则会出错)<br>  3.3 点击 Finish。会进行 Configure。中途可能会跳出红色错误，这是由于下载 ffmpeg, ippicv, data, xfeatures2d 相关的文件失败造成的。报错信息里会提示查看 log 文件，打开 log 文件后，根据信息，手动到网址下去下载 dll, zip, cmake 等文件，下载好后，以 <code>&lt;MD码&gt;-&lt;name&gt;.&lt;ext&gt;</code> 的方式命名，放在 <code>&lt;OpenCV_DIR/.cache&gt;</code> 下的相关路径中。重新点击 configure.<br>  3.4 勾选中复选框 <code>BUILD_opencv_world</code>, <code>WITH_CUDA</code>, <code>OPENCV_ENABLE_NONFREE</code>. 将 <code>&lt;OpenCV_CONTRIB_DIR/modules&gt;</code> 路径添加到 <code>OPENCV_EXTRA_MODULES_PATH</code> 中，再次点击 Configure.<br>  3.5 勾选 <code>CUDA_FAST_MATH</code>, 点击 Configure. 屏幕上应该一片白，没有红色信息.<br>  3.5 点击 Generate 以生成 sln. 此过程不应报错。</p></blockquote><hr><blockquote><p>[4]. VS 编译 Opencv.sln<br>  4.1 <code>&lt;OpenCV_DIR/build&gt;</code> 下打开 OpenCV.sln, 点击 生成 -&gt; 配置管理器，选择 <code>Release</code>, <code>x64</code>.<br>  4.2 将 <code>color_detail.hpp</code> 的 <code>96-127</code> 行的 <strong><code>const</code></strong> 替换为 <strong><code>constexpr</code></strong>. 否则会出现 <code>error : dynamic initialization is not supported for a __constant__ variable</code> 的错误. <a href="https://github.com/opencv/opencv/issues/13491#issuecomment-450754826" target="_blank" rel="noopener">来源1</a>  <a href="https://answers.opencv.org/question/205673/building-opencv-with-cuda-win10-vs-2017/" target="_blank" rel="noopener">来源2</a><br>  4.3 生成 <code>ALL_BUILD</code>. (主要关注 opencv_world 工程，此工程生成成功即可，实际过程中出现了 opencv_perf_gapi 和 opencv_test_gapi 工程报错的问题，貌似对我们的项目没有影响。)<br>  4.4 成功生成 <code>ALL_BUILD</code> 后 (生成了 opencv_world401.lib 和 opencv_world401.dll)，右键 <code>INSTALL</code> -&gt; <code>仅用于项目</code> -&gt; <code>仅生成INSTALL</code>.<br>  4.5 在 <code>&lt;OpenCV_DIR/install&gt;</code> 下是最后得到的 lib, dll，头文件等。</p></blockquote><h1 id="参考文档"><a class="markdownIt-Anchor" href="#参考文档"></a> 参考文档</h1><p><a href="https://blog.csdn.net/Gordon_Wei/article/details/85775328" target="_blank" rel="noopener">【OpenCV】opencv4.0.1+opencv_contrib4.0.1+VS2015的编译</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了使用 CUDA 8.0，Visual Studio 2015，Win10 来编译 OpenCV 4.0.1 的步骤。&lt;/p&gt;
    
    </summary>
    
    
      <category term="opencv" scheme="https://taosean.github.io/tags/opencv/"/>
    
      <category term="vs" scheme="https://taosean.github.io/tags/vs/"/>
    
      <category term="cuda" scheme="https://taosean.github.io/tags/cuda/"/>
    
      <category term="gpu" scheme="https://taosean.github.io/tags/gpu/"/>
    
  </entry>
  
  <entry>
    <title>Pyinstaller with Scipy</title>
    <link href="https://taosean.github.io//2019/04/02/Pyinstaller-with-Scipy/"/>
    <id>https://taosean.github.io//2019/04/02/Pyinstaller-with-Scipy/</id>
    <published>2019-04-02T06:54:17.000Z</published>
    <updated>2020-10-16T08:20:40.205Z</updated>
    
    <content type="html"><![CDATA[<p>在将 python 工程用 pyinstaller 打包成 exe 时，由于 import 了 scipy 的一些功能，因此生成的 exe 一直报错，经过努力终于解决。</p><a id="more"></a><h1 id="问题来源"><a class="markdownIt-Anchor" href="#问题来源"></a> 问题来源</h1><p>在 MLIT 的项目中，有使用到 scipy 库中的一个函数。因此，有 <code>from scipy.spatial.distance import cdist</code> 这句，但是突然不知道哪里发生了改动 (推测是某些库的版本在安装其他库时发生了变化)，打包好的 exe 在执行上述 import 语句时总是报错。</p><h1 id="trail-and-error"><a class="markdownIt-Anchor" href="#trail-and-error"></a> Trail and Error</h1><ol><li>由于 scipy 的版本在上次发版之后发生了改变（不知为啥），现在的版本为 1.2.0. 根据 <code>lib/site-packages/</code> 的痕迹推测之前的版本为 1.0.0. 但将 scipy 重装为 1.0.0 后仍然不成功。</li><li>按步骤 1 的方式操作后，<code>scipy/spatial/_spherical_voronoi.py</code> 中的 第 18 行 <code>from . import _voronoi</code> 仍然报错，大意为 <code>cannot import name _voronoi</code>. 其中，<code>_voronoi</code> 为 <code>scipy/spatial/</code>文件夹下的一个 pyd 文件，为 <code>_voronoi.pyd</code>. 可是事实上，我在 convert 的 bat 脚本中明明有通过 <code>hidden-import</code> 将此文件导入进去，生成的文件夹中也确实存在这个文件，但是程序总是无法成功导入。</li><li>后来经过搜索与分析，在 convert 脚本中添加了一行 <code>--paths=&quot;H:\Develop\Anaconda2\setup\Lib\site-packages\scipy\extra-dll&quot;</code>，就成功了。</li></ol><h1 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h1><p>上述方法成功后，分析成功原因。在执行 convert 脚本时，有一系列跟 scipy 有关的 warning. 大致都是说 hidden-import 的 pyd 文件的依赖 dll 找不到，而这些 warning 在我印象中以前并未出现过。在添加了 <code>--paths=&quot;H:\Develop\Anaconda2\setup\Lib\site-packages\scipy\extra-dll</code> 这一参数后，不再有这些 warning, exe 也可以成功执行。</p><h1 id="资源"><a class="markdownIt-Anchor" href="#资源"></a> 资源</h1><p><a href="convert_server.bat">完整的 convert 脚本</a><br><a href="mlit_pkg_version_20190402.txt">python库版本</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在将 python 工程用 pyinstaller 打包成 exe 时，由于 import 了 scipy 的一些功能，因此生成的 exe 一直报错，经过努力终于解决。&lt;/p&gt;
    
    </summary>
    
    
      <category term="pyinstaller" scheme="https://taosean.github.io/tags/pyinstaller/"/>
    
      <category term="scipy" scheme="https://taosean.github.io/tags/scipy/"/>
    
  </entry>
  
  <entry>
    <title>光流法</title>
    <link href="https://taosean.github.io//2019/02/25/optical-flow/"/>
    <id>https://taosean.github.io//2019/02/25/optical-flow/</id>
    <published>2019-02-25T08:34:14.000Z</published>
    <updated>2020-10-16T09:19:54.660Z</updated>
    
    <content type="html"><![CDATA[<p>对光流法进行了一个大致的了解，并了解了在高速情况下通过图像金字塔进行光流计算的方法。</p><a id="more"></a><h1 id="光流的定义"><a class="markdownIt-Anchor" href="#光流的定义"></a> 光流的定义</h1><p><strong>光流</strong> 是空间运动物体在观察成像平面上的像素运动的瞬时速度，是利用图像序列中像素在时间域上的变化以及相邻帧之间的相关性来找到上一帧跟当前帧之间存在的对应关系，从而计算出相邻帧之间物体的运动信息的一种方法。一般而言，光流是由于场景中前景目标本身的移动、相机的运动，或者两者的共同运动所产生的。</p><h1 id="光流法的原理"><a class="markdownIt-Anchor" href="#光流法的原理"></a> 光流法的原理</h1><h2 id="光流法的基本假设"><a class="markdownIt-Anchor" href="#光流法的基本假设"></a> 光流法的基本假设</h2><ol><li><font color="orange">亮度恒定不变，</font>即同一目标在不同帧间运动时，其亮度不会发生改变。这是基本光流法的假定（所有光流法变种都必须满足），用于得到光流法基本方程</li><li><font color="orange">时间连续或运动是“小运动”，</font>即时间的变化不会引起目标位置的剧烈变化，相邻帧之间位移要比较小。同样也是光流法不可或缺的假定。</li></ol><h2 id="基本约束方程"><a class="markdownIt-Anchor" href="#基本约束方程"></a> 基本约束方程</h2><p>根据光流法的基本假设，可以推导得出光流法的基本约束方程。<br>  考虑一个三维的矩阵 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi></mrow><annotation encoding="application/x-tex">I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span>  其三个维度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span>。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span> 为图像的两个维度，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span> 为时间维度。<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I(x,y,t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span> 表示 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span></span></span> 时刻的图像在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x,y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span> 坐标上的灰度值。<br>  根据两个基本假设，可得到方程</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mi>I</mi><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi>d</mi><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>+</mo><mi>d</mi><mi>y</mi><mo separator="true">,</mo><mi>t</mi><mo>+</mo><mi>d</mi><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I(x,y,t) = I(x+dx, y+dy, t+dt)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span></span></p><p>由于是小运动，因此可对 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi>d</mi><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>+</mo><mi>d</mi><mi>y</mi><mo separator="true">,</mo><mi>t</mi><mo>+</mo><mi>d</mi><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">I(x+dx, y+dy, t+dt)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span> 进行泰勒展开，即</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi>d</mi><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo>+</mo><mi>d</mi><mi>y</mi><mo separator="true">,</mo><mi>t</mi><mo>+</mo><mi>d</mi><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mi>I</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">)</mo><mo>+</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>I</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>x</mi></mrow></mfrac><mi>d</mi><mi>x</mi><mo>+</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>I</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow></mfrac><mi>d</mi><mi>y</mi><mo>+</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>I</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>t</mi></mrow></mfrac><mi>d</mi><mi>t</mi><mo>+</mo><mi>ϵ</mi></mrow><annotation encoding="application/x-tex">I(x+dx, y+dy, t+dt) = I(x,y,t) + \frac{\partial I}{\partial x}dx + \frac{\partial I}{\partial y}dy + \frac{\partial I}{\partial t}dt+\epsilon</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.25188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">ϵ</span></span></span></span></span></p><p>结合上式，得到</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>I</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>x</mi></mrow></mfrac><mi>d</mi><mi>x</mi><mo>+</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>I</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow></mfrac><mi>d</mi><mi>y</mi><mo>+</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>I</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>t</mi></mrow></mfrac><mi>d</mi><mi>t</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\frac{\partial I}{\partial x}dx + \frac{\partial I}{\partial y}dy + \frac{\partial I}{\partial t}dt=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.25188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p><p>令 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>u</mi><mo>=</mo><mfrac><mrow><mi>d</mi><mi>x</mi></mrow><mrow><mi>d</mi><mi>t</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">u=\frac{dx}{dt}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2251079999999999em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801079999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mo>=</mo><mfrac><mrow><mi>d</mi><mi>y</mi></mrow><mrow><mi>d</mi><mi>t</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">v=\frac{dy}{dt}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.277216em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>, 得到</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>I</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>x</mi></mrow></mfrac><mfrac><mrow><mi>d</mi><mi>x</mi></mrow><mrow><mi>d</mi><mi>t</mi></mrow></mfrac><mo>+</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>I</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>y</mi></mrow></mfrac><mfrac><mrow><mi>d</mi><mi>y</mi></mrow><mrow><mi>d</mi><mi>t</mi></mrow></mfrac><mo>+</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>I</mi></mrow><mrow><mi mathvariant="normal">∂</mi><mi>t</mi></mrow></mfrac><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\frac{\partial I}{\partial x}\frac{dx}{dt} + \frac{\partial I}{\partial y}\frac{dy}{dt} + \frac{\partial I}{\partial t}=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.25188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714399999999998em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.05744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">t</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p><p>即</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>x</mi></msub><mi>u</mi><mo>+</mo><msub><mi>I</mi><mi>y</mi></msub><mi>v</mi><mo>=</mo><mo>−</mo><msub><mi>I</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">I_x u+I_y v=-I_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>这就是光流的基本约束方程。</p><h2 id="lucas-kanade-光流算法"><a class="markdownIt-Anchor" href="#lucas-kanade-光流算法"></a> Lucas-Kanade 光流算法</h2><p>  由于光流的基本约束方程 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>x</mi></msub><mi>u</mi><mo>+</mo><msub><mi>I</mi><mi>y</mi></msub><mi>v</mi><mo>=</mo><mo>−</mo><msub><mi>I</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">I_x u+I_y v=-I_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 只有一个约束，但是却有两个未知数，因此无法求解。为了能够求解出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>u</mi><mo separator="true">,</mo><mi>v</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(u,v)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">u</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mclose">)</span></span></span></span>, 需要引入新的约束。<br>  Lucas-Kanade 光流算法引入了 <font color="orange"><strong>空间一致</strong></font> 假设，即所有的相邻像素有相似的行动。也即在目标像素周围 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>×</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">m\times m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 的区域内，每个像素均拥有相同的光流矢量。以此假设解决式</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>I</mi><mi>x</mi></msub><mi>u</mi><mo>+</mo><msub><mi>I</mi><mi>y</mi></msub><mi>v</mi><mo>=</mo><mo>−</mo><msub><mi>I</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">I_x u+I_y v=-I_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>无法求解的问题。</p><p><img src="LK.png" alt="LK光流法"><br>具体推导过程，参考 <a href="https://blog.csdn.net/sgfmby1994/article/details/68489944" target="_blank" rel="noopener">总结：光流–LK光流–基于金字塔分层的LK光流–中值流</a></p><br><h1 id="基于金字塔分层的-lk-光流法"><a class="markdownIt-Anchor" href="#基于金字塔分层的-lk-光流法"></a> 基于金字塔分层的 LK 光流法</h1><p>  根据光流的基本假设 2，光流适用于 <strong>小运动</strong> 场景，即相邻帧之间运动较小。因此，光流法无法直接处理运动较大的情况。因此，在处理运动较大的情况时，需要通过图像金字塔的方式。<br>具体细节，同样参考 <a href="https://blog.csdn.net/sgfmby1994/article/details/68489944" target="_blank" rel="noopener">总结：光流–LK光流–基于金字塔分层的LK光流–中值流</a></p><br><h1 id="基于光流的运动目标检测前景检测算法"><a class="markdownIt-Anchor" href="#基于光流的运动目标检测前景检测算法"></a> 基于光流的运动目标检测（前景检测）算法</h1><p><img src="fg.png" alt="基于光流的运动目标检测（前景检测）算法流程图"><br>参考这篇文章 <a href="https://blog.csdn.net/qq_41368247/article/details/82562165" target="_blank" rel="noopener">计算机视觉–光流法(optical flow)简介</a></p><br><h1 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h1><p><a href="https://blog.csdn.net/sgfmby1994/article/details/68489944" target="_blank" rel="noopener">总结：光流–LK光流–基于金字塔分层的LK光流–中值流</a><br><a href="https://blog.csdn.net/qq_41368247/article/details/82562165" target="_blank" rel="noopener">计算机视觉–光流法(optical flow)简介</a><br><a href="https://blog.csdn.net/jobbofhe/article/details/80448961" target="_blank" rel="noopener">【计算机视觉】光流法简单介绍</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对光流法进行了一个大致的了解，并了解了在高速情况下通过图像金字塔进行光流计算的方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="目标检测" scheme="https://taosean.github.io/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
      <category term="optical flow" scheme="https://taosean.github.io/tags/optical-flow/"/>
    
  </entry>
  
  <entry>
    <title>协方差及协方差矩阵</title>
    <link href="https://taosean.github.io//2019/01/25/covariance-and-covariance-matrix/"/>
    <id>https://taosean.github.io//2019/01/25/covariance-and-covariance-matrix/</id>
    <published>2019-01-25T02:49:16.000Z</published>
    <updated>2020-10-16T08:23:26.031Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要关注了协方差的定义、含义，协方差矩阵的性质以及 PCA 与协方差矩阵的关系</p><a id="more"></a><p>关于协方差的定义，这篇文章解释得很好<br><a href="https://blog.csdn.net/northeastsqure/article/details/50163031" target="_blank" rel="noopener">终于明白协方差的意义了</a></p><p>关于协方差矩阵的特征值特征向量和 PCA 的关系。这篇文章解释得很好。<br><a href="https://www.cnblogs.com/dengdan890730/p/5495078.html" target="_blank" rel="noopener">PCA算法是怎么跟协方差矩阵/特征值/特征向量勾搭起来的?</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要关注了协方差的定义、含义，协方差矩阵的性质以及 PCA 与协方差矩阵的关系&lt;/p&gt;
    
    </summary>
    
    
      <category term="协方差" scheme="https://taosean.github.io/tags/%E5%8D%8F%E6%96%B9%E5%B7%AE/"/>
    
      <category term="协方差矩阵" scheme="https://taosean.github.io/tags/%E5%8D%8F%E6%96%B9%E5%B7%AE%E7%9F%A9%E9%98%B5/"/>
    
      <category term="PCA" scheme="https://taosean.github.io/tags/PCA/"/>
    
      <category term="主成分分析" scheme="https://taosean.github.io/tags/%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Centos 系统下深度学习环境配置及 tensorflow 安装</title>
    <link href="https://taosean.github.io//2018/12/07/linux-install-setting-process/"/>
    <id>https://taosean.github.io//2018/12/07/linux-install-setting-process/</id>
    <published>2018-12-07T08:15:27.000Z</published>
    <updated>2020-10-16T08:24:08.801Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录了在新安装完 Centos 系统后的 NVIDIA 显卡驱动、cuda、cudnn、以及 TensorFlow 等 python 库的安装及配置。</p><a id="more"></a><p>更改启动设置</p><blockquote><p>(1) 查看系统默认启动环境。<code>systemctl get-default</code> -&gt; <code>graphical.target</code><br>(2) 将默认启动环境设置为命令行。<code>systemctl set-default multi-user.target</code><br>(3) <code>reboot</code></p></blockquote><p>禁用系统自带的 nouveau 显卡驱动。</p><blockquote><p>(4) run the NVIDIA driver file, it will create two <code>.conf</code> file to disable the nouveau driver for you under <code>/etc/modeprobe.d</code> and <code>/usr/...</code></p></blockquote><p>重做内核镜像</p><blockquote><p>(5) <code>mv /boot/initramfs-$(uname -r).img /boot/initramfs-$(uname -r)-nouveau.img</code>  # Backup image<br>(6) <code>dracut /boot/initramfs-$(uname -r).img $(uname -r)</code> # Create a new image<br>(7) <code>reboot</code></p></blockquote><p>安装 NVIDIA 显卡驱动</p><blockquote><p>(8) run the NVIDIA driver file again, finish the installation of NVIDIA driver.</p></blockquote><p>安装 Cuda</p><blockquote><p>(9) Install cuda 8.0, do not install the driver provided by cuda since we already installed the NVIDIA driver before.<br>(10) add <code>export PATH=/usr/local/cuda-8.0/bin:$PATH</code> and <code>export LD_LIBRARY_PATH=/usr/local/cuda-8/lib64:$LD_LIBRARY_PATH</code> to <code>~/.bashrc</code><br>(11) <code>source ~/.bashrc</code></p></blockquote><p>解压 cudnn</p><blockquote><p>(12) <code>tar zxvf cudnn.tgz</code> # extract cudnn files<br>copy extracted files to the corresponding folders under cuda installation directory</p></blockquote><p>安装 Anaconda/python</p><blockquote><p>(13) Install Ananconda. Do not add the Ananconda path to <code>/root/.bashrc</code>, add it to <code>~/.bashrc</code>.<br>(14) <code>source ~/.bashrc</code></p></blockquote><p>安装 tensorflow 或其他 python 库</p><blockquote><p>(15) <code>pip install tensorflow-gpu==1.0.0</code>. # Install GPU version tensorflow 1.0.0</p></blockquote><p>注意，安装 <code>1.0.0</code> 的 tensorflow 时，<code>numpy==1.16.2</code> 貌似会报错。因此，需要 check 一下 Anaconda 中 numpy 的版本。如果需要安装，则安装 <code>pip install numpy==1.14.2</code>。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录了在新安装完 Centos 系统后的 NVIDIA 显卡驱动、cuda、cudnn、以及 TensorFlow 等 python 库的安装及配置。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
